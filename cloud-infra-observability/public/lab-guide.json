[{"id":"1","name":"Environment Setup","content":"<h2 id=\"environmentsetup\">Environment Setup</h2>\n<p>You are the new Cloud Infra Ops/SRE expert in your company and you need to provide actionable observability to many teams that leverage your cloud and cloud native infrastructure.</p>\n<p>Congratulations on getting logged into Dynatrace University! This is the first step on our HOT Session. Please login to your Dynatrace UI and continue to the next exercise.</p>","activityList":[{"id":"1.1","name":"Turn on Metric Ingest","content":"<h2 id=\"turnonmetricingest\">Turn on Metric Ingest</h2>\n<h3 id=\"step1turnonmetricingestinthedynatraceui\">Step 1: Turn on Metric Ingest in the Dynatrace UI</h3>\n<ol>\n<li>Navigate to Manage &gt; Settings &gt; Monitoring &gt; Monitored Technologies and scroll down to the bottom of the list</li>\n<li>Click on Dynatrace OneAgent StatsD, Pipe, HTTP Metric API</li>\n<li>Toggle on: Enable Extension Execution Controller on every host and enable local PIPE/HTTP metric API on every host</li>\n</ol>\n<p><img src=\"assets/metricingest.png\" alt=\"metricingest\" /></p>","activityList":[]}]},{"id":"2","name":"Metric Browser and Data Explorer","content":"<h2 id=\"metricbrowseranddataexplorer\">Metric Browser and Data Explorer</h2>\n<p>In this section, you will learn to leverage the Metric Browser and Data Explorer to visualize metrics and create powerful dashboards.</p>\n<p><img src=\"assets/dashboard.png\" alt=\"dashboard\" /></p>\n<h3 id=\"exerciseprep\">Exercise Prep</h3>\n<ol>\n<li><p>Navigate to the Dynatrace University Terminal and ensure you're connected to the Easytravel Server</p></li>\n<li><p>Clone the GitHub repo to the Easytravel Server</p></li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/JasonOstroski/Perform-Hot-22-Cloud-Infra.git\n</code></pre>\n<ol start=\"3\">\n<li>Navigate to the Perform-Host-22-Cloud-Infra directory</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">cd</span> Perform-Hot-22-Cloud-Infra\n</code></pre>\n<ol start=\"4\">\n<li>Start the Cron Job Monitoring script</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">python3 cronjobduration.py\n</code></pre>\n<ol start=\"5\">\n<li>This will start a script that reports the duration of Cron job executions to the OneAgent. We need this data during this exercise.</li>\n</ol>","activityList":[{"id":"2.1","name":"Metrics Browser","content":"<h2 id=\"metricsbrowser\">Metrics Browser</h2>\n<h3 id=\"step1searchforametricbyname\">Step 1: Search for a metric by name</h3>\n<ol>\n<li>Navigate to Observe and Explore &gt; Metrics</li>\n<li>Search for metric by name\n<code>telegraf.mem.used_percent</code></li>\n<li>Favorite the metric</li>\n<li>Which dimensions are available?</li>\n</ol>\n<p><img src=\"assets/metricsbrowser.png\" alt=\"metricsbrowser\" /></p>\n<h3 id=\"step2addthememorymetrictoadashboard\">Step 2: Add the memory metric to a dashboard</h3>\n<ol>\n<li>Create Chart &gt; Pin to Dashboard</li>\n<li>Tile Name: Memory Utilization</li>\n</ol>\n<p><img src=\"assets/pintodash.png\" alt=\"pintodash\" /></p>\n<h3 id=\"step3namethedashboard\">Step 3: Name the Dashboard</h3>\n<ol>\n<li>Rename the dashboard \"Infrastructure Overview\"</li>\n</ol>","activityList":[]},{"id":"2.2","name":"Data Explorer","content":"<h2 id=\"dataexplorer\">Data Explorer</h2>\n<h3 id=\"step1findthememorymetricinthedataexplorer\">Step 1: Find the Memory Metric in the Data Explorer</h3>\n<ol>\n<li>Navigate to Observe and Explore &gt; Explore Data</li>\n<li>Search for the Telegraf Mem metric</li>\n<li>Pin the Memory Used Percent metric to the dashboard</li>\n<li>Tile Title: Memory Utilization</li>\n<li>Aggregation: Average</li>\n<li>Visualization: Column Graph</li>\n</ol>\n<p><img src=\"assets/dataexplorer.png\" alt=\"dataexplorer\" /></p>\n<h3 id=\"step2whichwaywaseasierbrowserorexplorer\">Step 2: Which way was easier, browser or explorer?</h3>\n<ol>\n<li>Why would you use one over the other?</li>\n</ol>\n<p><img src=\"assets/memchart.png\" alt=\"memchart\" /></p>","activityList":[]},{"id":"2.3","name":"Thresholds","content":"<h2 id=\"thresholds\">Thresholds</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You have different Kubernetes Nodes and want to verify their memory consumption</li>\n<li>You want to identify easily which ones are trespassing the warning and severe thresholds</li>\n</ul>\n<h3 id=\"visualizethresholdsoncharts\">Visualize thresholds on charts</h3>\n<ol>\n<li>Chart the \"Memory used %\" metric in the Explorer</li>\n<li>Split by: Host</li>\n<li>Filter by: Host: Software technologies: Kubernetes</li>\n<li>Aggregation: Average</li>\n<li>Left Axis: Min 0, Max 100</li>\n<li>Threshold: Green: Blank, Yellow: 70, Red: 85</li>\n<li>Visualization: Line Graph</li>\n</ol>\n<p><img src=\"assets/thresholdsaxis.png\" alt=\"thresholdsaxis\" /></p>\n<h3 id=\"pintodashboard\">Pin to dashboard</h3>\n<ol>\n<li>Tile Title: K8s Nodes&nbsp;Memory Used %</li>\n</ol>\n<p><img src=\"assets/k8snodemem.png\" alt=\"k8snodemem\" /></p>","activityList":[]},{"id":"2.4","name":"Top List with Thresholds","content":"<h2 id=\"toplistwiththresholds\">Top List with Thresholds</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You have multiple hosts monitored and would like to have a list of those with high CPU usage</li>\n<li>You want to identify easily which ones are trespassing the warning and severe thresholds</li>\n</ul>\n<h3 id=\"cpuusage\">CPU Usage %</h3>\n<ol>\n<li>Create a top list with CPU Usage %</li>\n<li>Aggregation: Average</li>\n<li>Split by: host</li>\n<li>Fold Transformation: Last value</li>\n<li>Threshold: Green: 0, Yellow: 70. Red: 85</li>\n</ol>\n<p><img src=\"assets/topcpuexplorer.png\" alt=\"topcpuexplorer\" /></p>\n<h3 id=\"pintodashboard\">Pin to dashboard</h3>\n<ol>\n<li>Tile Title: Top CPU Usage %</li>\n</ol>\n<p><img src=\"assets/topcputile.png\" alt=\"topcputile\" /></p>","activityList":[]},{"id":"2.5","name":"Metric Metadata","content":"<h2 id=\"metricmetadata\">Metric Metadata</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>The custom metrics from the cron job are being imported but the units are missing</li>\n<li>You want to update the metric to use MilliSeconds as unit</li>\n</ul>\n<h3 id=\"addmetricmetadataforthecronjobdurationmetric\">Add metric metadata for the cron job duration metric</h3>\n<ol>\n<li>In the Metrics Browser, search for cron.duration</li>\n<li>Click edit metadata button</li>\n<li>Display name: Cron Job Duration</li>\n<li>Unit: Millisecond</li>\n<li>Save and return to Metrics Browser to see your changes!</li>\n</ol>\n<p><img src=\"assets/cronexplorer.png\" alt=\"cronexplorer\" /></p>\n<p><img src=\"assets/cronmetadata.png\" alt=\"cronmetadata\" /></p>","activityList":[]},{"id":"2.6","name":"Cron Job vs CPU","content":"<h2 id=\"cronjobvscpu\">Cron Job vs CPU</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>Some of our cron jobs are taking longer than normal and we want to see if it’s CPU related</li>\n</ul>\n<h3 id=\"createanareachartforcpusystemusage\">Create an area chart for CPU system Usage</h3>\n<ol>\n<li>Metric: builtin:host.cpu.system</li>\n<li>Aggregation: Average</li>\n<li>Filter: Host: Name: Your EC2 EasyTravel instance</li>\n</ol>\n<h3 id=\"createalinechartwithcronjobduration\">Create a line chart with Cron Job Duration</h3>\n<ol>\n<li>Metric: cron.duration</li>\n<li>Aggregation: Average</li>\n<li>Split by: Job</li>\n</ol>\n<h3 id=\"pintodashboard\">Pin to dashboard</h3>\n<ol>\n<li>Tile Name: Cron Job Duration vs CPU</li>\n</ol>\n<p><img src=\"assets/cpuvscron.png\" alt=\"cpuvscron\" /></p>","activityList":[]},{"id":"2.7","name":"Prometheus Mongo DB Metric","content":"<h2 id=\"prometheusmongodbmetric\">Prometheus Mongo DB Metric</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>The MongoDB team is pulling metrics from Prometheus</li>\n<li>The metric mongodb_connections should be taken in consideration by DAVIS AI as an indicator for a faulty component</li>\n<li>You want to update the metric settings to be Root Cause Relevant</li>\n</ul>\n<h3 id=\"metricmetadata\">Metric Metadata</h3>\n<ol>\n<li>Navigate to Observe and Explore - Metrics</li>\n<li>Search for mongodb_connections</li>\n<li>Edit metric metadata</li>\n<li>Unit: Count</li>\n<li>Metric Properties: Toggle on Root Case Relevant</li>\n</ol>\n<p><img src=\"assets/mongometa.png\" alt=\"mongometa\" /></p>\n<h3 id=\"metricsexplorer\">Metrics Explorer</h3>\n<ol>\n<li>Search for mongodb_connections</li>\n<li>Tile Title: MongoDB Connections</li>\n<li>Aggregation: Count</li>\n<li>Pin to dashboard</li>\n</ol>\n<p><img src=\"assets/mongotile.png\" alt=\"mongotile\" /></p>","activityList":[]},{"id":"2.8","name":"K8s Logs and Events","content":"<h2 id=\"k8slogsandevents\">K8s Logs and Events</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You would like to chart some Kubernetes cluster event or log patterns (like evicted events)</li>\n</ul>\n<h3 id=\"pintablefromlogviewer\">Pin table from log viewer</h3>\n<ol>\n<li>Create a query for status=“INFO”</li>\n<li>Pin our table to Infrastructure Overview dashboard</li>\n</ol>\n<p><img src=\"assets/logviewer.png\" alt=\"logviewer\" /></p>\n<p><img src=\"assets/logtile.png\" alt=\"logtile\" /></p>","activityList":[]},{"id":"2.9","name":"K8s Pods Phase","content":"<h2 id=\"k8spodsphase\">K8s Pods Phase</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You would like to easily see the number of running, failed, pending… pods on your Kubernetes cluster</li>\n</ul>\n<h3 id=\"visualizek8spodsbyphase\">Visualize K8s Pods by Phase</h3>\n<ol>\n<li>Metric:&nbsp;builtin:cloud.kubernetes.workload.pods</li>\n<li>Aggregation: count</li>\n<li>Split by: Pod Phase</li>\n<li>Visualization: Pie</li>\n<li>Tile Title: K8s Pods by Phase</li>\n</ol>\n<p><img src=\"assets/podexplorer.png\" alt=\"podexplorer\" /></p>\n<p><img src=\"assets/podtile.png\" alt=\"podtile\" /></p>","activityList":[]},{"id":"2.10","name":"Cloud Cost Estimate Prep","content":"<h2 id=\"cloudcostestimateprep\">Cloud Cost Estimate Prep</h2>\n<h3 id=\"kickoffthecloudcostscript\">Kick off the cloud cost script</h3>\n<ol>\n<li>Navigate back to the DTU Terminal for the Easytravel Server</li>\n<li>Stop the cronjobduration.py script if it’s still running (Ctrl + C)</li>\n<li>Start the cloud cost script:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">python3 cloudcosts.py\n</code></pre>","activityList":[]},{"id":"2.11","name":"Cloud Cost Overview","content":"<h2 id=\"cloudcostoverview\">Cloud Cost Overview</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You are pulling external metrics from your cloud providers with billing information</li>\n<li>You want to review the total billing and each teams consumption</li>\n</ul>\n<h3 id=\"createanareaoverviewcloudcostchart\">Create an area overview cloud cost chart</h3>\n<ol>\n<li>Metric: cloud.costestimate</li>\n<li>Aggregation: SUM</li>\n<li>Tile Title: Cloud Cost Estimate</li>\n<li>Pin to the Infrastructure Overview dashboard</li>\n</ol>\n<p><img src=\"assets/cloudcostoverview.png\" alt=\"cloudcostoverview\" /></p>\n<h3 id=\"createalinechartbreakingdowntheresponsetimebyproviderandteam\">Create a line chart, breaking down the response time by provider and team</h3>\n<ol>\n<li>Metric: cloud.costestimate</li>\n<li>Split by: provider and team</li>\n<li>Aggregation: SUM</li>\n<li>Tile Title: Cloud Cost Estimate by Team</li>\n<li>Pin to the Infrastructure Overview dashboard</li>\n</ol>\n<p><img src=\"assets/cloudcostbyteam.png\" alt=\"cloudcostbyteam\" /></p>","activityList":[]},{"id":"2.12","name":"Dashboarding","content":"<h2 id=\"dashboarding\">Dashboarding</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You want to have this dashboard available for everybody</li>\n<li>Also easily make it easy to filter and find it</li>\n</ul>\n<h3 id=\"letscleanupthedashboard\">Let's clean up the dashboard</h3>\n<ol>\n<li>Add tags: Infrastructure, Ops</li>\n<li>Favorite the dashboard</li>\n<li>Add a Dynamic Filter for Kubernetes Namespace</li>\n<li>Add host health tile, problems tile, and headers</li>\n<li>Share the dashboard as preset</li>\n</ol>\n<p><img src=\"assets/dashboardtags.png\" alt=\"dashboardtags\" /></p>\n<p><img src=\"assets/dashboardfilter.png\" alt=\"dashboardfilter\" /></p>","activityList":[]},{"id":"2.13","name":"Optional: Splitting","content":"<h2 id=\"optionalsplitting\">Optional: Splitting</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You want to identify which Kubernetes namespaces have most pods running</li>\n</ul>\n<h3 id=\"k8snetworkprocessload\">K8s Network Process Load</h3>\n<ol>\n<li>Metric: builtin:cloud.kubernetes.namespace.runningPods</li>\n<li>Aggregation: Max</li>\n<li>Split by: Kubernetes Namespace</li>\n<li>Visualization: Column Graph</li>\n</ol>\n<p><img src=\"assets/runningpodsexplorer.png\" alt=\"runningpodsexplorer\" /></p>\n<h3 id=\"pintodashboard\">Pin to dashboard</h3>\n<ol>\n<li>Tile Name: Pods running by Namespace</li>\n</ol>\n<p><img src=\"assets/podsrunningtile.png\" alt=\"podsrunningtile\" /></p>","activityList":[]},{"id":"2.14","name":"Optional: Instance by Availablity Zone","content":"<h2 id=\"optionalinstancebyavailablityzone\">Optional: Instance by Availablity Zone</h2>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You want to identify those AWS Availability Zones that are more busy and identify any spike or drop</li>\n</ul>\n<h3 id=\"chartoutec2sbyawsaz\">Chart out EC2s by AWS AZ</h3>\n<ol>\n<li>Metric: builtin:cloud.aws.az.running</li>\n<li>Aggregation: Max</li>\n<li>Split by: AWS Availablity Zone</li>\n</ol>\n<p><img src=\"assets/azexplorer.png\" alt=\"azexplorer\" /></p>\n<h3 id=\"pintodashboard\">Pin to dashboard</h3>\n<ol>\n<li>Tile Name: EC2s running by AWS AZ</li>\n</ol>\n<p><img src=\"assets/aztile.png\" alt=\"aztile\" /></p>","activityList":[]},{"id":"2.15","name":"Optional: Top List with Threshold","content":"<h2 id=\"optionaltoplistwiththreshold\">Optional: Top List with Threshold</h2>\n<h3 id=\"createtwoseparatedtoplisttilesformemoryanddisknbsp\">Create two separated Top List tiles for Memory and Disk&nbsp;</h3>\n<ol>\n<li>Aggregation: Average</li>\n<li>Split by: Host</li>\n<li>Metrics: builtin:host.mem.usage,builtin:host.disk.usedPct</li>\n<li>Fold Transformation: Last</li>\n<li>Threshold: Green: 0, Yellow: 70, Red: 85</li>\n<li>Pin to dashboard</li>\n</ol>\n<p><img src=\"assets/topmemcpu.png\" alt=\"topmemcpu\" /></p>","activityList":[]},{"id":"2.16","name":"Optional: Running Pods and Workloads","content":"<h2 id=\"optionalrunningpodsandworkloads\">Optional: Running Pods and Workloads</h2>\n<h3 id=\"createanbsptoplistchart\">Create a&nbsp;Top list chart</h3>\n<ol>\n<li>Metric:&nbsp;builtin:cloud.kubernetes.namespace.runningPods</li>\n<li>Split By: namespace</li>\n<li>Aggregation&nbsp;: Sum</li>\n<li>Transformation: Last value&nbsp;</li>\n<li>Pin to dashboard</li>\n</ol>\n<p><img src=\"assets/runningpodstile.png\" alt=\"runningpodstile\" /></p>\n<h3 id=\"creategraphareachart\">Create Graph Area chart</h3>\n<ol>\n<li>Metric:&nbsp;builtin:cloud.kubernetes.namespace.workloads</li>\n<li>Split By: Deployment type</li>\n<li>Aggregation: Average</li>\n<li>Pin to dashboard</li>\n</ol>\n<p><img src=\"assets/workloadtile.png\" alt=\"workloadtile\" /></p>","activityList":[]},{"id":"2.17","name":"Optional: Kubernetes nodes infra metrics","content":"<h2 id=\"optionalkubernetesnodesinframetrics\">Optional: Kubernetes nodes infra metrics</h2>\n<h3 id=\"completethedashboardwiththekubernetesnodesmemorytrafficanddiskusage\">Complete the dashboard with the Kubernetes nodes Memory, Traffic and Disk usage %</h3>\n<ol>\n<li>Try to use the Clone and Code options</li>\n<li>Metrics: builtin:host.cpu.usage, builtin:host.disk.usedPct, builtin:host.net.nic.trafficIn, builtin:host.net.nic.trafficOut</li>\n</ol>\n<p><img src=\"assets/k8sinframetrics.png\" alt=\"k8sinframetrics\" /></p>","activityList":[]},{"id":"2.18","name":"Optional: Markdown links","content":"<h2 id=\"optionalmarkdownlinks\">Optional: Markdown links</h2>\n<h3 id=\"createanbsplinksectionatthebottomwithmarkdownsfromtheinfrastructuredashboard\">Create a&nbsp;link section, at the bottom, with markdowns from the infrastructure dashboard</h3>\n<ol>\n<li>Create a mark down link to Kubernetes overview page</li>\n<li>Mark down example: <code>##[Kubernetes](/ui/kubernetes)</code></li>\n<li>Create a markdown link to AWS overview page</li>\n<li>Mark down example: <code>##[AWS](#awses)</code></li>\n<li>What differs when the URLs used on the markdowns are full URLs?</li>\n<li>Example: <code>##[AWS](https://{tenant_URL}/#awses)</code></li>\n</ol>\n<p><img src=\"assets/markdown.png\" alt=\"markdown\" /></p>","activityList":[]}]},{"id":"3","name":"Management Zones","content":"<h2 id=\"managementzones\">Management Zones</h2>\n<h3 id=\"lookatthecloudcostestimatemetricinthemetricbrowserandgaininsightsonavailabledatadimensions\">Look at the cloud.costestimate metric in the metric browser and gain insights on available data dimensions</h3>\n<h3 id=\"scenario\">Scenario</h3>\n<ul>\n<li>You have different App teams that spin up resources in AWS and Azure</li>\n<li>You have a finance team that should see all cost estimates, but only cost data, no observability data</li>\n<li>Team A and Team B have their own budget and only want to see their own cloud costs</li>\n<li>Create management zones to cover all 3 scenarios</li>\n<li>What happens to the cloud cost tiles in the infrastructure overview dashboard when you select the different management zones?</li>\n<li>Explore this in the Metric Explorer too!</li>\n</ul>\n<h3 id=\"navigatetothemanagementzonessettings\">Navigate to the Management Zones Settings</h3>\n<ol>\n<li>Navigate to Manage &gt; Settings &gt; Preferences &gt; Management Zones</li>\n</ol>\n<p><img src=\"assets/mgmtcost.png\" alt=\"mgmtcost\" /></p>\n<p><img src=\"assets/mgmtteamA.png\" alt=\"mgmtteamA\" /></p>\n<p><img src=\"assets/mgmtteamB.png\" alt=\"mgmtteamB\" /></p>","activityList":[]},{"id":"4","name":"Metric Query and Expressions","content":"<h2 id=\"metricqueryandexpressions\">Metric Query and Expressions</h2>\n<h3 id=\"letsdigintosomeadvancedmetricqueries\">Let's dig into some advanced metric queries!</h3>","activityList":[{"id":"4.1","name":"Code Tab","content":"<h2 id=\"codetab\">Code Tab</h2>\n<h3 id=\"gotodataexplorerandselectthecodetab\">Go to Data Explorer and select the \"Code\" tab</h3>\n<ol>\n<li>Start typing builtin</li>\n<li>The command helper will pop-up</li>\n<li>Use the metric <code>builtin:host.cpu.usage</code></li>\n<li>Run query</li>\n</ol>\n<p><img src=\"assets/expression1.png\" alt=\"expression1\" /></p>\n<h3 id=\"whatistheoutput\">What is the output?</h3>","activityList":[]},{"id":"4.2","name":"Advanced Expressions Split","content":"<h2 id=\"advancedexpressionssplit\">Advanced Expressions Split</h2>\n<h3 id=\"splititbyhost\">Split it by host</h3>\n<ol>\n<li>Use the transformation :splitBy()</li>\n<li>Use the dimension dt.entity.host</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:splitBy(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>)\n</code></pre>\n<ol start=\"3\">\n<li>Click on Run Query</li>\n</ol>\n<p><img src=\"assets/expressions2.png\" alt=\"expressions2\" /></p>\n<h3 id=\"whatistheoutput\">What is the output?</h3>","activityList":[]},{"id":"4.3","name":"Advanced Expressions Sort","content":"<h2 id=\"advancedexpressionssort\">Advanced Expressions Sort</h2>\n<h3 id=\"descendingsort\">Descending Sort</h3>\n<ol>\n<li>Aggregation</li>\n<li>Use the aggregation :avg()</li>\n<li>Click on Run Query</li>\n<li>Sort it descending</li>\n<li>Use the transformation :sort()</li>\n<li>With value(avg ,descending)</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:splitBy(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>):avg:auto:sort(value(avg,descending))\n</code></pre>\n<p><img src=\"assets/expressions3.png\" alt=\"expressions3\" /></p>","activityList":[]},{"id":"4.4","name":"Advanced Expressions Entity Selector","content":"<h2 id=\"advancedexpressionsentityselector\">Advanced Expressions Entity Selector</h2>\n<h3 id=\"filterbyhoststaterunning\">Filter by Host State=Running</h3>\n<ol>\n<li>Use the transformation :filter()</li>\n<li>Use the operator and() inside the filter() transformation</li>\n<li>Use the operator in() inside the and() operator</li>\n<li>Inside&nbsp;the in() operator, compare the dimension \"dt.entity.host\" with an entitySelector</li>\n<li>Use the transformation entitySelector(\"type(host),state(~\"RUNNING~\")\")</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:filter(and(<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>,entitySelector(<span class=\"hljs-string\">&quot;type(host),state(~&quot;</span>RUNNING~<span class=\"hljs-string\">&quot;)&quot;</span>)))):splitBy(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>):avg:sort(value(avg,descending)):<span class=\"hljs-built_in\">limit</span>(10)\n</code></pre>\n<p><img src=\"assets/expressions4.png\" alt=\"expressions4\" /></p>\n<h3 id=\"whatistheoutput\">What is the output?</h3>\n<p><img src=\"assets/queryexplorer.png\" alt=\"queryexplorer\" /></p>","activityList":[]},{"id":"4.5","name":"Advanced Expressions Group Table","content":"<h2 id=\"advancedexpressionsgrouptable\">Advanced Expressions Group Table</h2>\n<h3 id=\"hostgroupedbycpuload\">Host grouped by CPU load</h3>\n<ol>\n<li>Metric:&nbsp;builtin:host.cpu.usage</li>\n<li>Aggregation: avg</li>\n<li>Group hosts by their CPU load with the transformation partition</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">:partition(CPU Load,\u000bvalue(<span class=\"hljs-string\">&quot;busy&quot;</span>, range(80,100)),\u000bvalue(<span class=\"hljs-string\">&quot;medium&quot;</span>, range(30,80)),\u000bvalue(<span class=\"hljs-string\">&quot;low&quot;</span>, range(0,30))\u000b)\n</code></pre>\n<ol start=\"4\">\n<li>Split by: CPU Load and Host</li>\n<li>Filter by CPU Load = \"low\"</li>\n<li>Sort by avg and ascending</li>\n<li>Chart type: table</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"> <span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:avg:partition(CPU Load,value(<span class=\"hljs-string\">&quot;busy&quot;</span>,range(80,100)),value(<span class=\"hljs-string\">&quot;medium&quot;</span>,range(30,80)),value(<span class=\"hljs-string\">&quot;low&quot;</span>,range(0,30))):splitBy(<span class=\"hljs-string\">&quot;CPU Load&quot;</span>,<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>):filter(eq(<span class=\"hljs-string\">&quot;CPU Load&quot;</span>,<span class=\"hljs-string\">&quot;low&quot;</span>)):sort(value(avg,ascending))\n</code></pre>\n<p><img src=\"assets/expressions5.png\" alt=\"expressions5\" /></p>\n<h3 id=\"whatistheoutput\">What is the output?</h3>\n<ol>\n<li>Pin to the Infrastructure Overview Dashboard</li>\n<li>Tile Title: Host CPU Analysis</li>\n</ol>","activityList":[]}]},{"id":"5","name":"Service Level Objectives","content":"<h2 id=\"servicelevelobjectives\">Service Level Objectives</h2>\n<h3 id=\"letscreatesomeslosifyoureadventuroustrytocreateadashboardsimilartothebelowone\">Let's create some SLOs! If you're adventurous, try to create a dashboard similar to the below one!</h3>\n<p><img src=\"assets/slodash.png\" alt=\"slodash\" /></p>","activityList":[{"id":"5.1","name":"Host Availablity SLO","content":"<h2 id=\"hostavailablityslo\">Host Availablity SLO</h2>\n<h3 id=\"slonamehostavailablityhostid\">SLO Name: Host Availablity: HOST-ID</h3>\n<ol>\n<li>Metric</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">builtin</span>:host.availability:filter(and(<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>,entitySelector(<span class=\"hljs-string\">&quot;type(host),entityId(&quot;</span>HOST-ID<span class=\"hljs-string\">&quot;)&quot;</span>)))):splitBy(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>)\n</code></pre>\n<ol start=\"2\">\n<li>How do we find the HOST-ID? Use your EC2 Instance</li>\n<li>SLO Filter:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">entityId(<span class=\"hljs-string\">&quot;HOST-ID&quot;</span>)\n</code></pre>\n<ol start=\"4\">\n<li>Target Percentage: 99.5%</li>\n<li>Warning Percent: 99.75%</li>\n<li>Timeframe: -1d</li>\n</ol>\n<p><img src=\"assets/hostslo.png\" alt=\"hostslo\" /></p>","activityList":[]},{"id":"5.2","name":"Pod Availablity SLO","content":"<h2 id=\"podavailablityslo\">Pod Availablity SLO</h2>\n<h3 id=\"slonamepodavailabilitysockshopproductionnbsp\">SLO Name: Pod Availability: sockshop-production&nbsp;</h3>\n<ol>\n<li>Metric</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">(<span class=\"hljs-built_in\">builtin</span>:cloud.kubernetes.namespace.runningPods:filter(and(<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-string\">&quot;dt.entity.cloud_application_namespace&quot;</span>,entitySelector(<span class=\"hljs-string\">&quot;type(cloud_application_namespace),entityName(~&quot;</span>sockshop-production~<span class=\"hljs-string\">&quot;)&quot;</span>)))):splitBy(<span class=\"hljs-string\">&quot;dt.entity.cloud_application_namespace&quot;</span>))/(<span class=\"hljs-built_in\">builtin</span>:cloud.kubernetes.namespace.desiredPods:filter(and(<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-string\">&quot;dt.entity.cloud_application_namespace&quot;</span>,entitySelector(<span class=\"hljs-string\">&quot;type(cloud_application_namespace),entityName(~&quot;</span>sockshop-production~<span class=\"hljs-string\">&quot;)&quot;</span>)))):splitBy(<span class=\"hljs-string\">&quot;dt.entity.cloud_application_namespace&quot;</span>))*(100)\n</code></pre>\n<ol start=\"2\">\n<li>Evaluation Type: Aggregate</li>\n<li>SLO Filter:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">type</span>(cloud_application_namespace),entityName(<span class=\"hljs-string\">&quot;sockshop-production&quot;</span>)\n</code></pre>\n<ol start=\"4\">\n<li>Target Percentage: 99%</li>\n<li>Warning Percent: 99.5%</li>\n<li>Timeframe: -1d</li>\n</ol>\n<p><img src=\"assets/podslo.png\" alt=\"podslo\" /></p>","activityList":[]},{"id":"5.3","name":"Optional - Service Success Rate SLO","content":"<h2 id=\"optionalservicesuccessrateslo\">Optional - Service Success Rate SLO</h2>\n<h3 id=\"nameservicesuccessratefrontend\">Name: Service Success Rate: front-end</h3>\n<ol>\n<li>Metric</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">builtin</span>:service.successes.server.rate:filter(and(<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-string\">&quot;dt.entity.service&quot;</span>,entitySelector(<span class=\"hljs-string\">&quot;type(service),entityName(~&quot;</span>front-end~<span class=\"hljs-string\">&quot;)&quot;</span>)))):splitBy(<span class=\"hljs-string\">&quot;dt.entity.service&quot;</span>)\n</code></pre>\n<ol start=\"2\">\n<li>Evaluation Type: Aggregate</li>\n<li>SLO Filter:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">type</span>(service),entityName(<span class=\"hljs-string\">&quot;front-end&quot;</span>)\n</code></pre>\n<ol start=\"4\">\n<li>Target Percentage: 99%</li>\n<li>Warning Percent: 97%</li>\n<li>Timeframe: -1d</li>\n</ol>\n<p><img src=\"assets/serviceslo.png\" alt=\"serviceslo\" /></p>","activityList":[]}]},{"id":"6","name":"AI Alerting and Auto-Adaptive Baselines","content":"<h2 id=\"aialertingandautoadaptivebaselines\">AI Alerting and Auto-Adaptive Baselines</h2>\n<h3 id=\"oneofourteamsautomatesalotoftheirinfrastructureinaws\">One of our teams automates a lot of their infrastructure in AWS</h3>\n<h3 id=\"howeveritseemsthatsomeoftheirscriptingisabitsloppyandsometimestoomanyresourcesspinupintheuseast1region\">However, it seems that some of their scripting is a bit sloppy and sometimes too many resources spin up in the US-EAST-1 region</h3>\n<h3 id=\"letscreateanautoadaptivebaselinetotellusiftheuseast1regioncloudcostestimatespikesfromnormal\">Let’s create an auto-adaptive baseline to tell us if the US-EAST-1 region cloud cost estimate spikes from normal</h3>","activityList":[{"id":"6.1","name":"Auto-Adaptive Baseline","content":"<h2 id=\"autoadaptivebaseline\">Auto-Adaptive Baseline</h2>\n<h3 id=\"navigatetosettingsanomalydetectioncustomeventsforalertingandcreateanautoadaptivebaselinealert\">Navigate to Settings &gt; Anomaly Detection &gt; Custom Events for Alerting and create an auto-adaptive baseline alert</h3>\n<ol>\n<li>Metric: cloud.costestimate</li>\n<li>Aggregation: SUM</li>\n<li>Region: us-east-1</li>\n<li>Alert of anomalies of 1 time the normal signal fluctuation.</li>\n<li>Metric is above baseline for 1 minute during any 5 minute period.</li>\n<li>Name: Increased Cloud Cost</li>\n<li>Severity: Custom Alert</li>\n</ol>\n<p><img src=\"assets/autobaseline1.png\" alt=\"autobaseline1\" /></p>\n<p><img src=\"assets/autobaseline2.png\" alt=\"autobaseline2\" /></p>","activityList":[]},{"id":"6.2","name":"Static Threshold","content":"<h2 id=\"staticthreshold\">Static Threshold</h2>\n<h3 id=\"createastaticthresholdoncronjobduration\">Create a static threshold on Cron Job Duration</h3>\n<ol>\n<li>Metric: cron.duration</li>\n<li>Aggregation: Average</li>\n<li>Entity: Host</li>\n<li>Static Threshold: 5 Seconds</li>\n<li>What’s the recommended threshold?</li>\n<li>Raise if above threshold for 1 minute during 3 minute period</li>\n<li>Review the Alert Preview</li>\n</ol>\n<p><img src=\"assets/static1.png\" alt=\"static1\" /></p>\n<ol start=\"8\">\n<li>Title: Cron Job Slowdown</li>\n<li>Severity: Slow down</li>\n</ol>\n<p><img src=\"assets/static2.png\" alt=\"static2\" /></p>\n<h3 id=\"letsslowitdown\">Let's slow it down!</h3>\n<ol>\n<li>Navigate back to the DTU Terminal for the EasyTravel server</li>\n<li>Stop the cloudcosts.py script if it’s still running (Ctrl + C)</li>\n<li>Run timedatectl to check the current time</li>\n<li>Ex: 1828 is 1:28 PM EST or 18:28 UTC</li>\n<li>Start the retail script:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">python3 cronjobduration.py HHMM 10\n</code></pre>\n<ol start=\"6\">\n<li>HHMM is the time you’d like the problem scenario to start</li>\n<li>Start it a few minutes after the current time</li>\n<li>10 is the number of minutes you’d like the scenario to run for</li>\n<li>Wait a few minutes and let’s see the problem!</li>\n</ol>\n<h3 id=\"reviewtheproblemticket\">Review the problem ticket</h3>\n<p><img src=\"assets/staticproblem.png\" alt=\"staticproblem\" /></p>","activityList":[]},{"id":"6.3","name":"Metric Expression Alert","content":"<h2 id=\"metricexpressionalert\">Metric Expression Alert</h2>\n<h3 id=\"alertwithametricexpressionsaboutakubernetesnodewithhighusage\">Alert with a Metric Expressions about a Kubernetes Node with High Usage</h3>\n<ol>\n<li>Create a new Custom event for alerting</li>\n<li>Select the Code option</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">(((<span class=\"hljs-built_in\">builtin</span>:cloud.kubernetes.node.cores:avg)-(<span class=\"hljs-built_in\">builtin</span>:cloud.kubernetes.node.cpuAvailable:avg))/(<span class=\"hljs-built_in\">builtin</span>:cloud.kubernetes.node.cores:avg)*(100))\n</code></pre>\n<ol start=\"3\">\n<li>In the \"Advanced entity settings\" Select \"Kubernetes Node\" as primary entity</li>\n<li>Set&nbsp;static threshold to 80</li>\n<li>Above threshold for 3 slots during 5 period</li>\n<li>Event Severity: Resource</li>\n</ol>\n<p><img src=\"assets/metricalert.png\" alt=\"metricalert\" /></p>","activityList":[]}]},{"id":"7","name":"Metric API","content":"<h2 id=\"metricapi\">Metric API</h2>\n<h3 id=\"beforewecanusethemetricapiweneedtogetatoken\">Before we can use the Metric API, we need to get a token</h3>\n<ol>\n<li><p>Settings&gt;Integration&gt;Dynatrace API</p></li>\n<li><p>Generate Token, name it, and turn on:</p></li>\n<li><p>API v2 - Read Metrics, Write Metrics, Ingest metrics, Read Entities</p></li>\n<li><p>API v1 – Access problems and event feed, metrics, and topology, read configuration, write configuration, and user sessions</p></li>\n<li><p>Copy the token and store in a safe place!</p></li>\n</ol>\n<h3 id=\"navigatetotheapiexplorer\">Navigate to the API explorer</h3>\n<ol>\n<li>Environment API v2</li>\n<li>Authorize and paste in API Token</li>\n<li>GET /metrics/query&nbsp;</li>\n<li>Metric Selector: telegraf.cpu.usage_user</li>\n<li>View available options and output</li>\n</ol>\n<p><img src=\"assets/metricapi.png\" alt=\"metricapi\" /></p>","activityList":[{"id":"7.1","name":"Postman","content":"<h2 id=\"postman\">Postman</h2>\n<h3 id=\"postmanprep\">Postman Prep</h3>\n<ol>\n<li>Create a workspace: PerformHOT2022</li>\n<li>Import from RAW Text</li>\n<li>Open a new browser tab: https://github.com/JasonOstroski/Perform-Hot-22-Cloud-Infra&nbsp;</li>\n<li>View Raw of metricsapipostmancollection.json</li>\n<li>Copy the entire text and paste into Postman - Import</li>\n</ol>\n<p><img src=\"assets/postman.png\" alt=\"postman\" /></p>\n<h3 id=\"letsgetdatafromthemetricapi\">Let's get data from the Metric API!</h3>\n<ol>\n<li>For the CPU and Disk GET requests: Replace {{tenant}} in GET with your Dynatrace Environment</li>\n<li>Be mindful that it’s easy to copy and paste https:// and it’s already in the GET request</li>\n<li>Replace {{API_TOKEN}} in the header with your API Token</li>\n<li>You can also do the replacements via Postman environments</li>\n</ol>","activityList":[]},{"id":"7.2","name":"API Calls","content":"<h2 id=\"apicalls\">API Calls</h2>\n<h3 id=\"onthefollowingexercisesreplaceeverythingbetweendoublecurlybracetswiththecorrespondingvalue\">On the following exercises replace everything between double curly bracets with the corresponding value</h3>\n<p><em>{{tenant}}</em> = my-dynatrace-environment</p>\n<p><em>{{api-token}}</em> = my-dynatrace-api-token</p>\n<p>First lets start describing the headers to use on the API calls</p>\n<h4 id=\"userthefollowingheaders\">User the following headers:</h4>\n<pre><code class=\"hljs bash language-bash\">Accept : application/json\nAuthorization: Api-Toke {{api-token}}\n</code></pre>\n<ol>\n<li><p>List all the metrics</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics\n</code></pre></li>\n<li><p>Simplify this list by just returning the <strong>metricId</strong> and <strong>aggregationType</strong> fields</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics?fields=metricId,aggregationTypes\n</code></pre></li>\n<li><p>List all builtin cpu metrics with metricID and dimensionDefinitions. To select the metric we are interested, we will use the <strong>metricSelector</strong> parameter</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.*&amp;fields=metricId,dimensionDefinitions\n</code></pre></li>\n<li><p>Get the cpu usage definition</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage\n</code></pre></li>\n<li><p>Return two metrics: cpu user and cpu system</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.system,<span class=\"hljs-built_in\">builtin</span>:host.cpu.user\n</code></pre>\n<p><em>Another option would be</em></p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.(system,user)\n</code></pre></li>\n<li><p>Use the <strong>text</strong> parameter to look for other metrics with the cpu string</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics?fields=metricId&amp;text=cpu\n</code></pre></li>\n<li><p>Retrieve values from the CPU usage of all hosts</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage\n</code></pre></li>\n<li><p>Return the information on CVS format. Change the Accept header to use <strong>text/csv</strong></p>\n<pre><code class=\"hljs bash language-bash\">``Accept : text/csv``\n</code></pre></li>\n<li><p>Get the Max CPU usage form all hosts by using the transformation <strong>max</strong></p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:max\n</code></pre></li>\n<li><p>Get also the <strong>min</strong> CPU usage</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:(max,min)\n</code></pre></li>\n<li><p><strong>Sort</strong> the returned information to show the top 3 hosts with Highest CPU usage(avg)</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:sort(value(avg, descending)):<span class=\"hljs-built_in\">limit</span>(3):fold\n</code></pre></li>\n<li><p>Add the host <strong>names</strong> to the previous invocation</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:names:sort(value(avg, descending)):<span class=\"hljs-built_in\">limit</span>(3):fold\n</code></pre></li>\n<li><p><strong>Filter</strong> on a specific hosts and return the <strong>last</strong> value</p>\n<p><em>Replace <HOST-ID> with the ID from one of the monitored hosts</em></p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:avg:names:filter(eq(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>,<span class=\"hljs-string\">&quot;&lt;HOST-ID&gt;&quot;</span>)):last\n</code></pre></li>\n<li><p>Will do the same query but instead of using filter, will select the entity with the <strong>entitySelector</strong> transformation</p>\n<p><em>Replace <HOST-ID> with the ID from one of the monitored hosts</em></p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:avg:names:last&amp;entitySelector=entityId(<span class=\"hljs-string\">&quot;HOST-8767D2CDEF1EB801&quot;</span>)\n</code></pre></li>\n<li><p>Now will introduce another endpoint <strong>/entities</strong>, will use the entities to perform advance filters on our queries</p>\n<p>Using the endpoint <strong>/entities</strong>, get all the entities monitored. Use the <strong>entitySelector</strong> transformation to select all hosts and return their OS</p>\n<p><em>Be aware that entitySelector must use always a TYPE(<entity-type>) or entityId(<entity-ID>)</em></p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/entities?entitySelector=TYPE(<span class=\"hljs-string\">&quot;HOST&quot;</span>)&amp;fields=properties.osType\n</code></pre></li>\n<li><p>Get all the hosts with the <strong>tag</strong> \"Environment:Test\"</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/entities?entitySelector=TYPE(<span class=\"hljs-string\">&quot;HOST&quot;</span>),tag(Environment:Test)\n</code></pre></li>\n<li><p>List all <strong>entityTypes</strong></p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/entityTypes\n</code></pre></li>\n<li><p>Get all EC2 instances monitored, their name and localIP</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/entities?entitySelector=TYPE(<span class=\"hljs-string\">&quot;EC2_INSTANCE&quot;</span>)&amp;fields=properties.localHostName,properties.localIP\n</code></pre></li>\n<li><p>Using the combination of <strong>metricSelector</strong> and <strong>entitySelector</strong> we can retrieve information form specific entities. Get the CPU usage for all hosts with the tag \"Environment:Test\"</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage&amp;entitySelector=TYPE(<span class=\"hljs-string\">&quot;HOST&quot;</span>),tag(<span class=\"hljs-string\">&quot;Environment:Test&quot;</span>)\n</code></pre></li>\n<li><p>Filter with entitySelector</p>\n<pre><code class=\"hljs bash language-bash\">https://{{tenant}}/api/v2/metrics/query?metricSelector=<span class=\"hljs-built_in\">builtin</span>:host.cpu.usage:filter(<span class=\"hljs-keyword\">in</span>(<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span>,entitySelector(<span class=\"hljs-string\">&quot;TYPE(HOST),tag(Environment:Test)&quot;</span>)))\n</code></pre></li>\n</ol>","activityList":[]}]},{"id":"8","name":"Configurator","content":"<h2 id=\"configurator\">Configurator</h2>\n<h3 id=\"wespentalotoftimetodaybuildingdashboardswouldntitbecooltoautomatedsomeofthis\">We spent a lot of time today building dashboards, wouldn't it be cool to automated some of this?</h3>\n<ol>\n<li>https://dynatrace.github.io/BizOpsConfigurator</li>\n<li>Enter your tenant URL and API Token</li>\n<li>Deploy Ops, Platform Overview, CPU Utilization (no diamond)</li>\n<li>Deploy Ops, Platform Overview, Disk Utilization (no diamond)</li>\n<li>Deploy Ops, Platform Overview, Memory Utilization (no diamond)</li>\n<li>Deploy Ops, Platform Overview, Network Observability (no diamond)</li>\n<li>Navigate back to the Dynatrace UI and see the new dashboards!</li>\n</ol>\n<p><img src=\"assets/bizops.png\" alt=\"bizops\" /></p>","activityList":[{"id":"8.1","name":"Dashboard Export","content":"<h2 id=\"dashboardexport\">Dashboard Export</h2>\n<h3 id=\"howcanibringmydashboardhomewithme\">How can I bring my dashboard home with me?</h3>\n<ol>\n<li>Go to your Infrastructure Overview dashboard</li>\n<li>Click … Button in upper right corner &gt; Share &gt; Advanced Settings</li>\n<li>Click dashboard JSON &gt; Download</li>\n<li>This is also available in the Configuration API for managing dashboards at scale</li>\n</ol>\n<p><img src=\"assets/dashboardjson.png\" alt=\"dashboardjson\" /></p>","activityList":[]}]}]
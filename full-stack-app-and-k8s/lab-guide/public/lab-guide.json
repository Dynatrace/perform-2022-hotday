[{"id":"1","name":"Introduction","content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Welcome to the <strong>Dynatrace for Full-Stack Cloud Platform Teams (App and K8s) lab</strong>.</p>\n<p>In this lab we will learn how to deploy Dynatrace OneAgent on the k8s platform to gain full-stack monitoring of all your k8s workload/applications. Plus, see how to integrate k8s clusters with Dynatrace software intelligence platform, so you can gain advanced observability into k8s clustersâ€™ health and k8s events.</p>\n<p>Our goals are:</p>\n<ol>\n<li><strong>Deploy the Dynatrace Operator</strong></li>\n<li><strong>Deploy our sample application - Sockshop</strong></li>\n<li><strong>Demonstrate full stack monitoring with Dynatrace</strong></li>\n<li><strong>Analyze our Kubernetes Integration</strong></li>\n<li><strong>Deploy and annotate Prometheus exporters to pull additional metrics into Dynatrace</strong></li>\n<li><strong>Create Kubernetes Dashboards to view all of these metrics in a single pane</strong></li>\n<li><strong>Utilize Log Monitoring v2 for Kubernetes logs and events</strong></li>\n</ol>","activityList":[]},{"id":"2","name":"Deploy Dynatrace Operator","content":"<h2 id=\"deploydynatraceoperator\">Deploy Dynatrace Operator</h2>\n<p>In this section, we will deploy the Dynatrace Operator which handles the lifecycle of the Dynatrace resources.</p>\n<p><img src=\"assets/classic_full_stack.png\" alt=\"Cloud Native Full Stack\" /></p>\n<p>Breakdown of resources:</p>\n<ul>\n<li><strong>OneAgent</strong>: deployed as a DaemonSet, collects host metrics from Kubernetes nodes. Also detects new containers and injects OneAgent code modules into application pods.</li>\n<li><strong>Dynatrace Kubernetes Monitor (ActiveGate)</strong>: collects cluster and workload metrics, events, and status from the Kubernetes API.</li>\n</ul>","activityList":[{"id":"2.1","name":"Run install.sh","content":"<h2 id=\"runinstallsh\">Run install.sh</h2>\n<p>Let's start the deployment by navigating to the Dynatrace menu and go to <strong>Deploy Dynatrace</strong>.</p>\n<ol>\n<li>Find and select <strong>Start installation</strong> and click on <strong>Kubernetes</strong>.</li>\n<li>On the <strong>Monitor Kubernetes / OpenShift</strong> page, follow the on-screen deployment instructions:<ul>\n<li><strong>Name</strong>: This name is used by various Dynatrace settings including: Kubernetes cluster name, Network Zone, ActiveGate Group, and Host Group.</li>\n<li><strong>Platform</strong>: Kubernetes</li>\n<li><strong>Paas token & API token</strong>: To create these tokens automatically, select <strong>Create tokens</strong>.</li>\n<li>Enable <strong>Skip SSL Certificate Check</strong>.</li>\n<li><strong>Copy the command as shown on the UI and run it with sudo access</strong>. </li></ul></li>\n</ol>\n<p><strong>Note</strong>: The <strong>install.sh</strong> script deploys the Dynatrace Operator and resources as well as automatically integrates the Kubernetes cluster with Dynatrace.</p>\n<p><img src=\"assets/monitor_kubernetes_menu.png\" alt=\"Monitor Kubernetes Menu\" /></p>\n<p>Output should look similar to the below screenshots:</p>\n<p><img src=\"assets/operator_output_1.png\" alt=\"Install.sh Output\" /></p>\n<p><img src=\"assets/operator_output_2.png\" alt=\"Install.sh Output\" /></p>","activityList":[]},{"id":"2.2","name":"Validate deployment","content":"<h2 id=\"validatedeployment\">Validate deployment</h2>\n<p>To validate the deployment of our Dynatrace Operator and resources we can:</p>\n<ol>\n<li><p>Check the pods' status with:</p>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-builtin-name\">get</span> pods -n dynatrace\n</code></pre>\n<p><img src=\"assets/dynatrace_pod_status.png\" alt=\"Dynatrace Pod Status\" /></p></li>\n<li><p>Navigate to the <strong>Hosts</strong> page in Dynatrace where we should see two hosts:</p>\n<p><img src=\"assets/hosts_status.png\" alt=\"Hosts\" /></p></li>\n<li><p>Navigate to the <strong>Kubernetes</strong> page in Dynatrace where we should see one cluster:</p>\n<p><img src=\"assets/k8s_cluster_status.png\" alt=\"Kubernetes Cluster\" /></p></li>\n</ol>\n<p><strong>Note</strong>: The <strong>Kubernetes metrics</strong> may take a few minutes to populate, as long as you see a cluster in step 3 you can move on to the next step.</p>","activityList":[]}]},{"id":"3","name":"Deploy Sockshop","content":"<h2 id=\"deploysockshop\">Deploy Sockshop</h2>\n<p>We will be deploying the Dynatrace version of the Sockshop application which utilizes a microservice architecture. This will be deployed using a few deploy-all yaml files in the next step.</p>\n<p><img src=\"assets/sockshop_demo.png\" alt=\"Sockshop\" /></p>","activityList":[{"id":"3.1","name":"Deploy-all YAML","content":"<h2 id=\"deployallyaml\">Deploy-all YAML</h2>\n<p>Let's start our application deployment:</p>\n<ol>\n<li><p>Navigate to the deploy-sockshop directory and creating our sockshop namespace:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">deploy-sockshop</span>\n</code></pre>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">kubectl create ns sockshop</span>\n</code></pre></li>\n<li><p>Next we'll deploy the sockshop infrastructure, which includes databases, queues, and their services:</p>\n<pre><code class=\"hljs\">kubectl apply <span class=\"hljs-operator\">-f</span> <span class=\"hljs-built_in\">deploy-all</span><span class=\"hljs-literal\">-infra</span>.yaml\n</code></pre>\n<p><img src=\"assets/deploy_all_infra.png\" alt=\"Deploy-all Infra\" /></p></li>\n<li><p>Finally, we'll deploy the sockshop application and its services:</p>\n<pre><code class=\"hljs\">kubectl apply <span class=\"hljs-operator\">-f</span> <span class=\"hljs-built_in\">deploy-all</span><span class=\"hljs-literal\">-app</span>.yaml\n</code></pre>\n<p><img src=\"assets/deploy_all_app.png\" alt=\"Deploy-all App\" /></p>\n<ul>\n<li><p><strong>Note</strong>: To check the status of the deployments you can use:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">kubectl</span> <span class=\"hljs-meta\">get</span> pods,<span class=\"hljs-keyword\">svc</span> -n sockshop\n</code></pre></li></ul></li>\n</ol>","activityList":[]},{"id":"3.2","name":"Access the application","content":"<h2 id=\"accesstheapplication\">Access the application</h2>\n<p><strong>Note</strong>: We use a LoadBalancer service to expose our front-end microservice to the public.</p>\n<p>Let's access our application:</p>\n<ol>\n<li><p>Retrieve our front-end endpoint from its service:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">kubectl</span> <span class=\"hljs-meta\">get</span> <span class=\"hljs-keyword\">svc</span> -n sockshop\n</code></pre>\n<p><img src=\"assets/front_end_endpoint.png\" alt=\"Front-end Endpoint\" /></p></li>\n<li><p>Paste the endpoint into your browser and click around the application to generate traffic.</p>\n<p><img src=\"assets/sockshop_app.png\" alt=\"Sockshop App\" /></p></li>\n</ol>","activityList":[]}]},{"id":"4","name":"Full Stack Monitoring","content":"<h2 id=\"fullstackmonitoring\">Full Stack Monitoring</h2>\n<p>In this section we'll walkthrough the entire application stack in Dynatrace, starting with the host level and moving up to the application layer.</p>\n<h3 id=\"hosts\">Hosts</h3>\n<ul>\n<li><p>Navigate to the <strong>Hosts</strong> page and select a host:</p>\n<p><img src=\"assets/hosts_status.png\" alt=\"Hosts\" /></p>\n<p><img src=\"assets/specific_host.png\" alt=\"Specific Host\" /></p></li>\n</ul>\n<h3 id=\"processespodsprocessgroups\">Processes (Pods) &amp; Process Groups</h3>\n<ul>\n<li><p>Select a <strong>Process (Pod)</strong> from the <strong>Processes and Containers</strong> section on the host page:</p>\n<p><img src=\"assets/specific_process.png\" alt=\"Process\" /></p></li>\n<li><p>Open the <strong>Properties and tags</strong> and select the <strong>Process Group</strong>:</p>\n<p><img src=\"assets/process_group.png\" alt=\"Process Group\" /></p></li>\n</ul>\n<h3 id=\"services\">Services</h3>\n<ul>\n<li><p>Navigate to the <strong>Services</strong> page and select the <strong>front-end</strong> Service:</p>\n<p><img src=\"assets/services.png\" alt=\"Services\" /></p>\n<p><img src=\"assets/front_end_service.png\" alt=\"Front-End Service\" /></p></li>\n</ul>\n<h3 id=\"applications\">Applications</h3>\n<ul>\n<li><p>Navigate to the <strong>Frontend</strong> page and select <strong>My web application</strong>:</p>\n<p><img src=\"assets/applications.png\" alt=\"Applications\" /></p>\n<p><img src=\"assets/my_web_application.png\" alt=\"My web application\" /></p></li>\n</ul>","activityList":[]},{"id":"5","name":"Kubernetes Integration","content":"<h2 id=\"kubernetesintegration\">Kubernetes Integration</h2>\n<p>In this section, we'll explore the additional cluster, workload, and container metrics pulled into Dynatrace via the Kubernetes API.</p>\n<h3 id=\"cluster\">Cluster</h3>\n<ul>\n<li><p>Navigate to the <strong>Kubernetes</strong> page and select the cluster:</p>\n<p><img src=\"assets/kubernetes_page.png\" alt=\"Kubernetes Page\" /></p>\n<p><img src=\"assets/kubernetes_cluster.png\" alt=\"Kubernetes Cluster\" /></p></li>\n</ul>\n<h3 id=\"workloads\">Workloads</h3>\n<ul>\n<li><p>Navigate to the <strong>Kubernetes workloads</strong> page and select the <strong>carts</strong> deployment:</p>\n<p><img src=\"assets/workloads.png\" alt=\"Workloads Page\" /></p>\n<p><img src=\"assets/carts_workload.png\" alt=\"Carts Workload\" /></p></li>\n</ul>\n<h3 id=\"pods\">Pods</h3>\n<ul>\n<li><p>Select the <strong>carts-*</strong> pod:</p>\n<p><img src=\"assets/carts_pod.png\" alt=\"Carts Pod\" /></p></li>\n</ul>","activityList":[]},{"id":"6","name":"Prometheus","content":"<h2 id=\"prometheus\">Prometheus</h2>\n<p>In this section, we will be installing Prometheus on the Kubernetes cluster so that it can monitor the application pods using node-exporter and mongodb-exporter. We will also be enabling Dynatrace to pull the metrics the Prometheus exporters are capturing.</p>\n<p><a href=\"https://prometheus.io/\">https://prometheus.io/</a></p>","activityList":[{"id":"6.1","name":"Installing Prometheus and Enabling Exporters","content":"<h2 id=\"installingprometheusandenablingexporters\">Installing Prometheus and Enabling Exporters</h2>\n<h3 id=\"installprometheusanddeploynodeexporter\">Install Prometheus and Deploy node-exporter</h3>\n<ul>\n<li><p>Execute the below commands in order to install Prometheus and deploy our node-exporter:</p>\n<pre><code class=\"hljs\">  sudo snap install helm --classic\n\n  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\n  helm repo update\n\n  helm install prometheus-<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-exporter</span> prometheus-community/prometheus-<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">-exporter</span>\n</code></pre></li>\n</ul>\n<h3 id=\"annotatemongodbexporter\">Annotate mongo-db exporter</h3>\n<ul>\n<li><p>Prometheus will have the mongodb-exporter already added on your Helm prometheus-community. </p></li>\n<li><p>You will need the ClusterIP for the carts-db (mongodb) service to configure Prometheus so that it collects metrics from mongodb-exporter, run the following command:</p>\n<pre><code class=\"hljs\">  kubectl describe svc -<span class=\"hljs-built_in\">n</span> sockshop carts-<span class=\"hljs-built_in\">db</span>\n</code></pre>\n<p><img src=\"assets/carts_db_ip.png\" alt=\"Carts-DB IP\" /></p>\n<ul>\n<li><strong>Note</strong>: Keep the ClusterIP handy as its needed while setting up the mongodb-exporter.</li></ul></li>\n<li><p>This will deploy the mongodb-exporter pod in your Kubernetes cluster:</p>\n<pre><code class=\"hljs\">  helm <span class=\"hljs-keyword\">install</span> prometheus-mongo-carts-db prometheus-community/prometheus-mongodb-exporter --<span class=\"hljs-keyword\">set</span> mongodb.uri=mongodb://clusterip:<span class=\"hljs-number\">27017</span>,serviceMonitor.enabled=<span class=\"hljs-keyword\">false</span> --<span class=\"hljs-keyword\">set</span>-<span class=\"hljs-keyword\">string</span> podAnnotations.<span class=\"hljs-string\">&quot;prometheus\\.io/scrape&quot;</span>=<span class=\"hljs-keyword\">true</span>  --<span class=\"hljs-keyword\">set</span>-<span class=\"hljs-keyword\">string</span> podAnnotations.<span class=\"hljs-string\">&quot;prometheus\\.io/port&quot;</span>=<span class=\"hljs-number\">9108</span>\n</code></pre>\n<ul>\n<li><strong>Note</strong>: Replace the <strong>clusterip</strong> string with the ClusterIP we retrieved earlier.</li></ul></li>\n<li><p>You can view all Prometheus pods running in your cluster by executing:</p>\n<pre><code class=\"hljs\">  kubectl <span class=\"hljs-builtin-name\">get</span> pods\n</code></pre></li>\n</ul>","activityList":[]},{"id":"6.2","name":"Prometheus Metrics in Dynatrace","content":"<h2 id=\"prometheusmetricsindynatrace\">Prometheus Metrics in Dynatrace</h2>\n<p>In this step, we will annotate the exporters so that the OneAgents running on the cluster know to pull the Prometheus metrics and push them to the Dynatrace tenant.</p>\n<h3 id=\"enablecollectionofprometheusmetricsindynatrace\">Enable collection of Prometheus metrics in Dynatrace</h3>\n<ol>\n<li><p>Navigate to <strong>Kubernetes</strong> page and select your cluster</p></li>\n<li><p>Click on the \"<strong>â€¦</strong>\" in the top-right corner and select <strong>Settings</strong></p>\n<p><img src=\"assets/enable_prometheus_collection.png\" alt=\"Enable Prometheus Collection\" /></p></li>\n<li><p>Enable the <strong>Monitor annotated Prometheus exporters</strong> toggle and select <strong>Save changes</strong></p>\n<p><img src=\"assets/monitor_prometheus_toggle.png\" alt=\"Enable Monitor Prometheus\" /></p></li>\n</ol>\n<h3 id=\"annotatethemongodbexporter\">Annotate the mongodb-exporter</h3>\n<ul>\n<li><p>First we need to get the pod name:</p>\n<pre><code class=\"hljs\">  kubectl <span class=\"hljs-builtin-name\">get</span> pods\n</code></pre>\n<p><img src=\"assets/mongo_exporter_annotations.png\" alt=\"Mongo Exporter\" /></p></li>\n<li><p>Next we will replace <strong>mongodb-exporter</strong> with the pod name in the commands below and run them to annotate the pod:</p>\n<pre><code class=\"hljs\">  kubectl annotate pod mongodb-exporter metrics.dynatrace.com/<span class=\"hljs-attribute\">scrape</span>=<span class=\"hljs-literal\">true</span> <span class=\"hljs-attribute\">--namespace</span>=default\n  kubectl annotate pod mongodb-exporter metrics.dynatrace.com/<span class=\"hljs-attribute\">port</span>=9216 <span class=\"hljs-attribute\">--namespace</span>=default\n</code></pre></li>\n</ul>\n<h3 id=\"annotatethenodeexporteroptional\">Annotate the node-exporter - Optional</h3>\n<p>We will follow a similar pattern for the node-exporter</p>\n<ul>\n<li><p>First we need to get the pod name:</p>\n<pre><code class=\"hljs\">  kubectl <span class=\"hljs-builtin-name\">get</span> pods\n</code></pre>\n<p><img src=\"assets/node_exporter_annotations.png\" alt=\"Node Exporter\" /></p></li>\n<li><p>Next we will replace <strong>node-exporter</strong> with the pod name in the commands below and run them to annotate the pod:</p>\n<pre><code class=\"hljs\">  kubectl annotate pod node-exporter metrics.dynatrace.com/<span class=\"hljs-attribute\">scrape</span>=<span class=\"hljs-literal\">true</span> <span class=\"hljs-attribute\">--namespace</span>=default\n  kubectl annotate pod node-exporter metrics.dynatrace.com/<span class=\"hljs-attribute\">port</span>=9100 <span class=\"hljs-attribute\">--namespace</span>=default\n</code></pre></li>\n</ul>\n<h3 id=\"viewmetricsindynatrace\">View metrics in Dynatrace</h3>\n<ul>\n<li><p>Navigate to the <strong>Metrics</strong> page in Dynatrace.</p></li>\n<li><p>Search for text \"<strong>mongodb</strong>\"</p>\n<p><img src=\"assets/metrics_mongodb.png\" alt=\"Mongo Metrics\" /></p></li>\n</ul>","activityList":[]},{"id":"6.3","name":"Filter Prometheus Metrics","content":"<h2 id=\"filterprometheusmetrics\">Filter Prometheus Metrics</h2>\n<p>In this step, we will annotate the exporters so that the OneAgents only pull specific Prometheus metrics and push them to the Dynatrace tenant.</p>\n<p>By default, all of the metrics collected by the annotated exporter(s) will be pulled into Dynatrace. </p>\n<ul>\n<li><p>However, you can limit the metrics by annotating the pod with an optional filter key as below:</p>\n<pre><code class=\"hljs\">  metrics<span class=\"hljs-selector-class\">.dynatrace</span><span class=\"hljs-selector-class\">.com</span>/<span class=\"hljs-attribute\">filter</span>: |\n      {\n        <span class=\"hljs-string\">&quot;mode&quot;</span>: <span class=\"hljs-string\">&quot;include&quot;</span>,\n        <span class=\"hljs-string\">&quot;names&quot;</span>: [\n            <span class=\"hljs-string\">&quot;metrics-name-1&quot;</span>,\n            <span class=\"hljs-string\">&quot;metrics-name-2&quot;</span>,\n            <span class=\"hljs-string\">&quot;metrics-name...n&quot;</span>\n        ]\n    }\n</code></pre>\n<ul>\n<li><strong>Note</strong>: Replace the metrics-name-1, metrics-name-2, etc. with the appropriate key of the metrics you would like pulled in by Dynatrace.</li></ul></li>\n<li><p>Now, let's annotate our mongodb-exporter to limit our collection of metrics to two:</p>\n<ul>\n<li>mongodb_network_metrics_num_requests_total</li>\n<li>mongodb_asserts_total</li></ul></li>\n<li><p>Replace <strong>pod_name</strong> with the mongodb-exporter pod name:</p>\n<pre><code class=\"hljs\">  kubectl <span class=\"hljs-builtin-name\">edit</span> pod pod_name\n</code></pre></li>\n<li><p>Add the below section to the pod's yaml (be careful with spacing here):</p>\n<pre><code class=\"hljs\">        metrics<span class=\"hljs-selector-class\">.dynatrace</span><span class=\"hljs-selector-class\">.com</span>/<span class=\"hljs-attribute\">filter</span>: |\n          {\n              <span class=\"hljs-string\">&quot;mode&quot;</span>: <span class=\"hljs-string\">&quot;include&quot;</span>,\n              <span class=\"hljs-string\">&quot;names&quot;</span>: [\n                  <span class=\"hljs-string\">&quot;mongodb_network_metrics_num_requests_total&quot;</span>,\n                  <span class=\"hljs-string\">&quot;mongodb_asserts_total&quot;</span>\n              ]\n          }\n</code></pre>\n<p><img src=\"assets/filter_annotation.png\" alt=\"Filter\" /></p></li>\n<li><p>Once added, press <strong>ESC + :wq</strong> to quit the editor. The pod is now annotated with the filtered metrics you will receive in Dynatrace.</p>\n<ul>\n<li><strong>Note</strong>: mode supports both <strong>include</strong> and <strong>exclude</strong> keywords. Also, the names accept wildcard like mongo* should you have multiple metrics with similar text patterns.</li></ul></li>\n</ul>","activityList":[]}]},{"id":"7","name":"Kubernetes Dashboards","content":"<h2 id=\"kubernetesdashboards\">Kubernetes Dashboards</h2>\n<p>In this section we will be creating a Kubernetes dashboards using all of the different metrics we've looked at so far. Additionally, we will look at a few preset dashboards provided by Dynatrace.</p>\n<p><img src=\"assets/cluster_overview_dashboard.png\" alt=\"Cluster Overview\" /></p>","activityList":[{"id":"7.1","name":"Create a dashboard","content":"<h2 id=\"createadashboard\">Create a dashboard</h2>\n<p>In this step, we will create our own Kubernetes dashboard using metrics we've seen in the previous steps.</p>\n<ol>\n<li><p>Navigate to the <strong>Dashboards</strong> page and select <strong>Create dashboard</strong></p>\n<ul>\n<li><p>Enter a dashboard name (ex. <em>My K8s Dashboard</em>) and click <strong>Create</strong></p>\n<p><img src=\"assets/create_dashboard.png\" alt=\"Create Dashboard\" /></p></li></ul></li>\n<li><p>Drag &amp; drop a <strong>Graph</strong> tile onto the dashboard</p>\n<ul>\n<li><p>Select <strong>Configure tile in Data Explorer</strong></p>\n<p><img src=\"assets/first_tile.png\" alt=\"First Tile\" /></p></li></ul></li>\n<li><p>Search for <strong><em>namespace workloads</em></strong></p>\n<ul>\n<li><p>Select the <strong>Workloads</strong> (<em>builtin:cloud.kubernetes.namespace.workloads</em>) metric</p>\n<p><img src=\"assets/data_explorer_workloads.png\" alt=\"Workloads\" /></p></li>\n<li><p>Change aggregation to <strong>Sum</strong> and split by <strong>Deployment type</strong></p></li>\n<li><p>Select <strong>Run query</strong> then <strong>Save changes to dashboard</strong></p>\n<p><img src=\"assets/data_explorer_change_filters.png\" alt=\"Data Explorer Filters\" /></p></li></ul></li>\n<li><p><strong>Result</strong></p>\n<p><img src=\"assets/dashboard_with_tile.png\" alt=\"Dashboard with tile\" /></p></li>\n<li><p>Go through these steps again</p>\n<ul>\n<li>This time utilize <strong>different metrics</strong> and <strong>visualizations</strong>.<ul>\n<li>Example metrics:<ul>\n<li><em>mongodb_network_metrics_num_requests_total.count</em></li>\n<li><em>Pods builtin:cloud.kubernetes.workload.pods</em></li>\n<li><em>Container cpu usage builtin:containers.cpu_usage2</em></li>\n<li><em>CPU requests builtin:cloud.kubernetes.node.cpuRequested</em></li></ul></li></ul></li></ul></li>\n</ol>","activityList":[]},{"id":"7.2","name":"View preset dashboard","content":"<h2 id=\"viewpresetdashboard\">View preset dashboard</h2>\n<p>In this step, we will view the preset Kubernetes dashboard(s) provided by Dynatrace.</p>\n<ol>\n<li><p>Navigate to the <strong>Dashboards</strong> page and select the <strong>Kubernetes cluster overview</strong> dashboard</p>\n<p><img src=\"assets/k8s_preset_dashboard.png\" alt=\"Kubernetes Preset Dashboard\" /></p></li>\n</ol>","activityList":[]}]},{"id":"8","name":"Log Monitoring v2","content":"<h2 id=\"logmonitoringv2\">Log Monitoring v2</h2>\n<p>In this section we will:</p>\n<ul>\n<li>Enable log ingestion</li>\n<li>Create a metric based on specific log content </li>\n<li>Create a custom event for alerting based on that metric</li>\n<li>Trigger a problem based on that custom event for alerting</li>\n</ul>\n<p><img src=\"assets/log_error.png\" alt=\"Log Error\" /></p>","activityList":[{"id":"8.1","name":"Enable log ingestion","content":"<h2 id=\"enablelogingestion\">Enable log ingestion</h2>\n<p>In this step, we will enable log ingestion.</p>\n<ol>\n<li><p>Navigate to <strong>Settings</strong> &gt; <strong>Log Monitoring</strong> &gt; <strong>Log sources and storage</strong></p>\n<ul>\n<li>Change the scope to <strong>Include all logs</strong></li>\n<li>Click on <strong>Save changes</strong></li></ul>\n<p><img src=\"assets/enable_logs.png\" alt=\"Enable Logs\" /></p></li>\n<li><p>Navigate to the <strong>Carts</strong> page (<em>basket.html</em>) of the sockshop application and reload the page a few times.</p>\n<ul>\n<li><p><strong>Note</strong>: If you need to get your frontend endpoint again you can run:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">kubectl</span> <span class=\"hljs-meta\">get</span> <span class=\"hljs-keyword\">svc</span> -n sockshop\n</code></pre>\n<p><img src=\"assets/front_end_endpoint.png\" alt=\"Front-end Endpoint\" /></p></li></ul></li>\n</ol>","activityList":[]},{"id":"8.2","name":"Create metric","content":"<h2 id=\"createmetric\">Create metric</h2>\n<p>In this step, we will create a metric based on log content.</p>\n<ol>\n<li><p>Navigate to the <strong>Logs</strong> page</p>\n<p><img src=\"assets/logs_navigation.png\" alt=\"Log Navigation\" /></p></li>\n<li><p>Filter for <strong>status: error</strong> and <strong>content: err=\"Invalid Id Hex\"</strong></p>\n<p><img src=\"assets/log_error.png\" alt=\"Log Error\" /></p></li>\n<li><p>Click on the <strong>Create metrics</strong> button</p></li>\n<li><p>Add <em>key</em> <strong>log.user.invalid_id_hex_error</strong></p></li>\n<li><p>Add dimension <strong><em>dt.kubernetes.event.involved_object.name</em></strong></p></li>\n<li><p>Click on <strong>Save changes</strong></p>\n<p><img src=\"assets/create_log_metric.png\" alt=\"Create Log Metric\" /></p></li>\n</ol>","activityList":[]},{"id":"8.3","name":"Create custom event for alerting","content":"<h2 id=\"createcustomeventforalerting\">Create custom event for alerting</h2>\n<p>In this step, we will create a custom event for alerting based on the metric from the previous step.</p>\n<ol>\n<li><p>Navigate to <strong>Settings</strong> &gt; <strong>Anomaly detection</strong> &gt; <strong>Custom events for alerting</strong></p>\n<ul>\n<li>Click on <strong>Create custom event for alerting</strong></li></ul>\n<p><img src=\"assets/custom_event_nav.png\" alt=\"Custom Event Navigation\" /></p></li>\n<li><p>Filter for <em>Metric</em> <strong>log.user.invalid_id_hex_error</strong></p>\n<p><img src=\"assets/custom_event.png\" alt=\"Custom Event Filter\" /></p></li>\n<li><p>Set the static threshold as:</p>\n<ul>\n<li>Alert with a static threshold of <strong>1</strong></li>\n<li>Raise an alert if the metric is <strong>above</strong> the threshold for</li>\n<li><strong>1</strong> one minute slots during any <strong>3</strong> minute period</li></ul>\n<p><img src=\"assets/custom_event_threshold.png\" alt=\"Custom Event Threshold\" /></p></li>\n<li><p>Add a title in the <em>Event description</em> such as <strong>User - Invalid Id Hex</strong></p>\n<ul>\n<li>Click on <strong>Create custom event for alerting</strong></li></ul>\n<p><img src=\"assets/create_custom_event.png\" alt=\"Create Custom Event\" /></p></li>\n</ol>","activityList":[]},{"id":"8.4","name":"Create and analyze problem","content":"<h2 id=\"createandanalyzeproblem\">Create and analyze problem</h2>\n<p>In this step, we will cause a problem to be created based on our custom event for alerting in the previous step.</p>\n<ol>\n<li><p>Navigate to the <strong>Carts</strong> page (<em>basket.html</em>) of the sockshop application and reload the page multiple times.</p>\n<ul>\n<li><p><strong>Note</strong>: If you need to get your frontend endpoint again you can run:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">kubectl</span> <span class=\"hljs-meta\">get</span> <span class=\"hljs-keyword\">svc</span> -n sockshop\n</code></pre>\n<p><img src=\"assets/front_end_endpoint.png\" alt=\"Front-end Endpoint\" /></p></li></ul></li>\n<li><p>Once a problem is created, navigate to the <strong>Problems</strong> page</p>\n<ul>\n<li>Select the <strong>Custom alert</strong> where the title is (or is similar to) <strong>User - Invalid Id Hex</strong></li></ul>\n<p><img src=\"assets/log_problem.png\" alt=\"Problem\" /></p></li>\n<li><p>Select <strong>Analyze logs</strong></p>\n<ul>\n<li>This brings us to the <strong>Logs</strong> page with the context of the problem already selected (<em>status: error | content: \"err=\"Invalid Id Hex\"</em>)</li></ul>\n<p><img src=\"assets/logs_with_problem_context.png\" alt=\"Logs Page Problem\" /></p></li>\n<li><p>After a few minutes, the <strong>Problem</strong> should resolve itself:</p>\n<p><img src=\"assets/log_problem_resolved.png\" alt=\"Problem Resolved\" /></p></li>\n</ol>\n<ul>\n<li><p><strong>Note</strong>: The metric we created can also be used in a <em>Data Explorer chart</em> and be put on a <em>dashboard</em>.</p>\n<p><img src=\"assets/log_metric_chart.png\" alt=\"Data Explorer Log Metric\" /></p></li>\n</ul>","activityList":[]}]}]
[{"id":"1","name":"Getting Started\r","content":"<h2 id=\"gettingstarted\">Getting Started</h2>\n<h2 id=\"tipswhenworkinginthevirturalclassroom\">Tips when working in the virtural classroom</h2>\n<ol>\n<li>Use your mouse to right-click copy/paste. Keyboard ctrl+c or ctrl+v will not work.</li>\n<li>The Bastion Host can be accessed by navigating to 'Environments' in the virtural classroom, clicking on 'Open Terminal'.</li>\n<li>The Dynatrace envrionment can be accessed by navigating to 'Environments' in the virtural classroom, clicking on 'View Environment'.</li>\n</ol>\n<p><img src=\"assets/started_1.png\" alt=\"started 1\" /></p>\n<ol>\n<li>You can open multiple terminals, by duplicating the 'https://university.dynatrace.com/' and opening the terminal.</li>\n<li>The HoT session lab guides are found under 'Activities'</li>\n</ol>\n<p><img src=\"assets/started_2.png\" alt=\"started 2\" /></p>\n<ol>\n<li>Editing files can be done by using 'vim'.</li>\n</ol>\n<ul>\n<li>Opening a file to edit : vim filename.ext</li>\n<li>Editing a file : 'i' key</li>\n<li>Closing a file without saving : 'esc' key &gt; ':' key &gt; type 'q!'</li>\n<li>Closing a file with saving: 'esc' key &gt; ':' key &gt; type 'wq!'</li>\n</ul>\n<p><img src=\"assets/cp.png\" alt=\"Checkpoint!\" /></p>\n<p>Please take a moment to mark the spreadsheet <em>Checked Environment</em> column for your row with <code>done</code>.</p>","activityList":[]},{"id":"2","name":"Metrics\r","content":"<h2 id=\"metrics\">Metrics</h2>\n<p>In this module, we'll:</p>\n<ul>\n<li>Ingest custom metrics via Metric API</li>\n<li>Dashboard custom metrics</li>\n<li>Create a custom metric event</li>\n</ul>\n<h2 id=\"dynatracemetricapi\">Dynatrace Metric API</h2>\n<h3 id=\"createapitoken\">Create API Token</h3>\n<p>Navigate to <code>Access Tokens</code> via Dynatrace Menu : <code>Manage &gt; Access Tokens</code></p>\n<ul>\n<li>Click on Generate New Token</li>\n</ul>\n<p><img src=\"assets/metric_1.png\" alt=\"metric 1\" /></p>\n<p>-Set token name <code>Perform 2022</code></p>\n<p><img src=\"assets/metric_1_1.png\" alt=\"metric 1_1\" /></p>\n<ul>\n<li>Search for <code>metric</code></li>\n<li>Select <code>Ingest Metrics</code> &amp; <code>Read Metrics</code> &amp; <code>Write Metrics</code> API v2</li>\n</ul>\n<p><img src=\"assets/metric_2.png\" alt=\"metric 2\" /></p>\n<ul>\n<li>Search for <code>logs</code></li>\n<li>Select <code>Ingest Logs</code> &amp; <code>Read Logs</code> API v2</li>\n</ul>\n<p><img src=\"assets/metric_3.png\" alt=\"metric 3\" /></p>\n<ul>\n<li>Click on <code>Generate Token</code></li>\n<li>Copy and Save Token to Notepad and click DONE.</li>\n</ul>\n<p><img src=\"assets/metric_4.png\" alt=\"metric 4\" /></p>\n<ul>\n<li>POST Metric via API</li>\n<li>Navigate to <code>Environment API v2</code> via Account Icon</li>\n</ul>\n<p><img src=\"assets/metric_4.4.png\" alt=\"metric 4.4\" /></p>\n<ul>\n<li>Search for <code>Metrics</code> then select <code>POST</code> /metrics/ingest</li>\n</ul>\n<p><img src=\"assets/metric_4.5.png\" alt=\"metric 4.5\" /></p>\n<ul>\n<li>Copy and Paste API-TOKEN via lock icon and authorize token</li>\n</ul>\n<p><img src=\"assets/metric_4.6.png\" alt=\"metric 4.6\" /></p>\n<ul>\n<li>Click on <code>Try it out</code></li>\n<li>Copy and Paste the metrics below :</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">perform2022.mycool.metric,state=Wisconsin,country=US 22\nperform2022.mycool.metric,state=Georgia,country=US 67\nperform2022.mycool.metric,state=Maine,country=US 55\nperform2022.mycool.metric,state=Nevada,country=US 42\n</code></pre>\n<ul>\n<li>Click on execute</li>\n</ul>\n<p><img src=\"assets/metric_4.7.png\" alt=\"metric 4.7\" /></p>\n<ul>\n<li>Validate response</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">{\n  <span class=\"hljs-string\">&quot;linesOk&quot;</span>: 4,\n  <span class=\"hljs-string\">&quot;linesInvalid&quot;</span>: 0,\n  <span class=\"hljs-string\">&quot;error&quot;</span>: null,\n  <span class=\"hljs-string\">&quot;warnings&quot;</span>: null\n}\n</code></pre>\n<p>Execute the command several more times over a couple minutes.</p>\n<h3 id=\"validatemetricindynatrace\">Validate Metric in Dynatrace</h3>\n<ul>\n<li>Navigate to <code>Metrics</code> via Dynatrace menu : <code>Observe and explore &gt; Metrics</code></li>\n<li>Search for <code>perform2022</code></li>\n</ul>\n<p><img src=\"assets/metric_5.png\" alt=\"metric 5\" /></p>\n<ul>\n<li>It may take a minute, refresh screen if metric doesn't appear</li>\n</ul>\n<h3 id=\"dashboardsetup\">Dashboard Setup</h3>\n<ul>\n<li>Create a Dashboard</li>\n<li>Navigate to <code>Dashboards</code> via Dynatrace menu: <code>Observe and explore &gt; Dashboards</code></li>\n<li>Click on <code>Create Dashboard</code></li>\n<li>Set name to <code>Perform 2022 Dashboard</code></li>\n</ul>\n<p><img src=\"assets/metric_6.png\" alt=\"metric 6\" /></p>\n<p>Pin Metric to Dashboard</p>\n<blockquote>\n  <ol>\n  <li>Navigate to <code>Explore Data</code> via Dynatrace menu: <code>Observe and explore &gt; Explore Data</code></li>\n  <li>Search for <code>Perform2022</code></li>\n  <li>Split by <code>Country</code> &amp; <code>State</code></li>\n  <li>Click on <code>Run query</code></li>\n  </ol>\n</blockquote>\n<p><img src=\"assets/metric_7.png\" alt=\"metric 7\" /></p>\n<blockquote>\n  <ol start=\"5\">\n  <li>Click on <code>Pin to Dashboard</code></li>\n  <li>Find the <code>Perform 2022 Dashboard</code> Dashboard</li>\n  <li>Set tile to <code>Perform 2022 Metric</code></li>\n  <li>Click on <code>Pin</code></li>\n  </ol>\n</blockquote>\n<p><img src=\"assets/metric_8.png\" alt=\"metric 8\" /></p>\n<h3 id=\"reviewdashboard\">Review Dashboard</h3>\n<p>Open <code>Perform 2022 Dashboard</code> and review <code>Perform 2022 Metric</code> tile</p>\n<p><img src=\"assets/metric_9.png\" alt=\"metric 9\" /></p>\n<h3 id=\"analyzeandalert\">Analyze and Alert</h3>\n<p>Create Custom Metric Event for Alerting.</p>\n<blockquote>\n  <ol>\n  <li>Navigate to <code>Custom Events for alerting</code> via Dynatrace menu: <code>Manage &gt; Settings &gt; Anomaly Detection &gt; Custom Events for Alerting</code></li>\n  </ol>\n</blockquote>\n<p><img src=\"assets/metric_10.png\" alt=\"metric 10\" /></p>\n<blockquote>\n  <ol start=\"2\">\n  <li>Click on <code>Create custom event for alerting</code></li>\n  <li>Search for <code>Perform2022</code></li>\n  </ol>\n</blockquote>\n<p><img src=\"assets/metric_10.1.png\" alt=\"metric 10.1\" /></p>\n<blockquote>\n  <ol start=\"4\">\n  <li>Set threshold to <code>30</code></li>\n  <li>Set threshold time to <code>1</code> one minute in every <code>3</code> minute period</li>\n  </ol>\n</blockquote>\n<p><img src=\"assets/metric_11.png\" alt=\"metric 11\" /></p>\n<blockquote>\n  <ol start=\"6\">\n  <li>Set Event Description Title to <code>Perform2022 Custom Metric Event</code></li>\n  <li>Set Severity to <code>Error</code></li>\n  <li>Add the following to message</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs bash language-bash\">Dynamic Country: {dims:country}\nDynamic State: {dims:state}\n</code></pre>\n<p><img src=\"assets/metric_12.png\" alt=\"metric 12\" /></p>\n<p>Generate Problem</p>\n<blockquote>\n  <ol>\n  <li>Execute the command we used to ingest the <code>Perform2022.mycool.metric</code> several times over a couple minutes</li>\n  <li>Navigate to <code>Problems</code> via Dynatrace menu: <code>Observe and explore &gt; Problems</code></li>\n  <li>A new problem with the title <code>Perform2022 Custom Metric Event</code> will open</li>\n  </ol>\n</blockquote>\n<p><img src=\"assets/metric_13.png\" alt=\"metric 13\" /></p>\n<blockquote>\n  <ol start=\"4\">\n  <li>Click on the problem to open the problem card</li>\n  <li>Identify the dynamic <code>Country</code> and <code>Sate</code> value</li>\n  </ol>\n</blockquote>\n<p><img src=\"assets/metric_14.png\" alt=\"metric 14\" /></p>","activityList":[]},{"id":"3","name":"Logs\r","content":"<h2 id=\"logs\">Logs</h2>\n<p>In this module, we'll:</p>\n<ul>\n<li>Ingest logs using Log Ingestion API </li>\n<li>Create Log Metric</li>\n<li>Create Log Event  </li>\n</ul>\n<h3 id=\"logingestapi\">Log Ingest API</h3>\n<p>We will use an Early Adopter feature of the v2 Log Ingest to POST directly to Dynatace Environment.\n(Currently, v2 Log Ingest is via Active Gate.)</p>\n<h4 id=\"createenvrionmentvariablesonbastionhost\">Create envrionment variables on Bastion Host</h4>\n<p>Open terminal.\nDynatrace will index the logs on dimensions:</p>\n<blockquote>\n  <ul>\n  <li>Replace APITOKEN with the value of you API TOKEN</li>\n  <li>NODENAME dt.kubernetes.node.name</li>\n  <li>NODE<em>ID dt.kubernetes.node.system</em>uuid</li>\n  <li>CLUSTERID  dt.kubernetes.cluster.id</li>\n  <li>NAMESPACEID  k8s.namespace.uid</li>\n  <li>NAMESPACENAME  k8s.namespace.name</li>\n  <li>PODNAME k8s.pod.name</li>\n  <li>PODID k8s.pod.uid</li>\n  </ul>\n</blockquote>\n<ol>\n<li>Copy and Paste the following  :</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">CLUSTERID=$(kubectl get namespace kube-system -o jsonpath=<span class=\"hljs-string\">&#x27;{.metadata.uid}&#x27;</span>)\nDTNODEID=$(kubectl get nodes -o jsonpath=<span class=\"hljs-string\">&#x27;{.items[1].status.nodeInfo.systemUUID}&#x27;</span>)\nNODENAME=$(kubectl get nodes -o jsonpath=<span class=\"hljs-string\">&#x27;{.items[1].metadata.name}&#x27;</span>)\nNAMESPACEID=$(kubectl get ns -o jsonpath=<span class=\"hljs-string\">&#x27;{.items[1].metadata.uid}&#x27;</span>)\nNAMESPACENAME=$(kubectl get ns -o jsonpath=<span class=\"hljs-string\">&#x27;{.items[1].metadata.name}&#x27;</span>)\nPODNAME=$(kubectl get pods -n <span class=\"hljs-variable\">$NAMESPACENAME</span> -o jsonpath=<span class=\"hljs-string\">&#x27;{.items[1].metadata.name}&#x27;</span>)\nPODID=$(kubectl get pods -n <span class=\"hljs-variable\">$NAMESPACENAME</span> -o jsonpath=<span class=\"hljs-string\">&#x27;{.items[1].metadata.uid}&#x27;</span>)\n</code></pre>\n<p>Validate the environment variables:</p>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">echo</span> -e CLUSTERID=<span class=\"hljs-variable\">$CLUSTERID</span> <span class=\"hljs-string\">&#x27;\\n&#x27;</span> DTNODEID=<span class=\"hljs-variable\">$DTNODEID</span> <span class=\"hljs-string\">&#x27;\\n&#x27;</span> NODENAME=<span class=\"hljs-variable\">$NODENAME</span> <span class=\"hljs-string\">&#x27;\\n&#x27;</span> NAMESPACEID=<span class=\"hljs-variable\">$NAMESPACEID</span> <span class=\"hljs-string\">&#x27;\\n&#x27;</span> NAMESPACENAME=<span class=\"hljs-variable\">$NAMESPACENAME</span> <span class=\"hljs-string\">&#x27;\\n&#x27;</span> PODNAME=<span class=\"hljs-variable\">$PODNAME</span> <span class=\"hljs-string\">&#x27;\\n&#x27;</span> PODID=<span class=\"hljs-variable\">$PODID</span>\n</code></pre>\n<p><img src=\"assets/log_2.png\" alt=\"Log 2\" /></p>\n<p>Create <code>ENVDOMAIN</code> and <code>APITOKEN</code> envrionment variables:</p>\n<ul>\n<li>YOUR-ENV-DOMAIN is Dynatrace environment URL <code>https://#######.sprint.dynatracelabs.com</code> (remove the ending backslash)</li>\n<li>APITOKEN is the token generated in Metric HoT</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">export</span> ENVDOMAIN={YOUR-ENV-DOMAIN}\n<span class=\"hljs-built_in\">export</span> APITOKEN={APITOKEN}\n</code></pre>\n<p>POST Log to Dynatrac via Log Ingest API</p>\n<pre><code class=\"hljs bash language-bash\">curl -iX POST <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ENVDOMAIN</span>/api/v2/logs/ingest&quot;</span> -H <span class=\"hljs-string\">&quot;accept: application/json; charset=utf-8&quot;</span> -H <span class=\"hljs-string\">&quot;Authorization: Api-Token <span class=\"hljs-variable\">$APITOKEN</span>&quot;</span> -H <span class=\"hljs-string\">&quot;Content-Type: application/json; charset=utf-8&quot;</span> -d <span class=\"hljs-string\">&#x27;[{&quot;content&quot;:&quot;example log content 1&quot;,&quot;status&quot;:&quot;error&quot;,&quot;log.source&quot;:&quot;/var/log/syslog&quot;,&quot;dt.kubernetes.node.name&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NODENAME</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dt.kubernetes.node.system_uuid&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DTNODEID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dt.kubernetes.cluster.id&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$CLUSTERID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.namespace.uid&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NAMESPACEID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.namespace.name&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NAMESPACENAME</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.pod.name&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$PODNAME</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.pod.uid&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$PODID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;response&quot;:12},{&quot;content&quot;:&quot;example log content 2&quot;,&quot;status&quot;:&quot;info&quot;,&quot;log.source&quot;:&quot;/var/log/syslog&quot;,&quot;dt.kubernetes.node.name&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NODENAME</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dt.kubernetes.node.system_uuid&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DTNODEID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dt.kubernetes.cluster.id&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$CLUSTERID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.namespace.uid&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NAMESPACEID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.namespace.name&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NAMESPACENAME</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.pod.name&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$PODNAME</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;k8s.pod.uid&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$PODID</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;response&quot;:1}]&#x27;</span>\n</code></pre>\n<h4 id=\"validatelogsindynatraceenvironment\">Validate Logs in Dynatrace Environment</h4>\n<p>Navigate to Dynatrace Envrionment &gt; Logs (refresh page)</p>\n<p><img src=\"assets/log_3.png\" alt=\"Log 3\" /></p>\n<h4 id=\"createametricoutofalogs\">Create a metric out of a logs</h4>\n<p>We will create a metric out of logs to be viewed in a dashboard.</p>\n<p>In the Log Viewer, add the following filters:</p>\n<pre><code class=\"hljs bash language-bash\">status: error\nk8s.namespace.name: dynatrace\n</code></pre>\n<p><img src=\"assets/log_4.png\" alt=\"Log 4\" /></p>\n<p>Click on <code>Create Metric</code></p>\n<p><img src=\"assets/log_5.png\" alt=\"Log 5\" /></p>\n<p>Set key to:</p>\n<pre><code class=\"hljs bash language-bash\">log.perform2022.error\n</code></pre>\n<p>Add the following dimensions:</p>\n<pre><code class=\"hljs bash language-bash\">dt.entity.cloud_application_namespace\ndt.entity.cloud_application_instance\n</code></pre>\n<p>Click on <code>Save Changes</code></p>\n<p><img src=\"assets/log_6.png\" alt=\"Log 6\" /></p>\n<p>Execute the Log Ingest POST (x3)</p>\n<p>Navigate to <code>Explore Data</code> and search for:</p>\n<pre><code class=\"hljs bash language-bash\">log.perform2022.error\n</code></pre>\n<p>Add the following <code>splitBy</code>:</p>\n<pre><code class=\"hljs bash language-bash\">kubernetes pod\nkuberenetes namespace\n</code></pre>\n<p>Add the following <code>filterBy</code>:</p>\n<pre><code class=\"hljs bash language-bash\">Kubernetes namespace:Name: Dynatrace\n</code></pre>\n<p><img src=\"assets/log_7.png\" alt=\"Log 7\" /></p>\n<h4 id=\"analyzeandalert\">Analyze and Alert</h4>\n<p>We will create a Log Event that will generate problems.</p>\n<p>Navigate to <code>Settings</code> &gt; <code>Log Monitoring</code> &gt; <code>Log Events</code> and Click on <code>Add Log Event</code></p>\n<p><img src=\"assets/log_8.png\" alt=\"Log 8\" /></p>\n<p>Set the following values:</p>\n<pre><code class=\"hljs bash language-bash\">Summary: Perform 2022 Log Error Event\n\nLog Query: status=<span class=\"hljs-string\">&quot;error&quot;</span> AND k8s.namespace.name=<span class=\"hljs-string\">&quot;dynatrace&quot;</span>\n\nTitle: Perform 2022 Log Error Event\n\nEvent Type: Error\n</code></pre>\n<p><img src=\"assets/log_9.png\" alt=\"Log 9\" /></p>\n<p>Add the following properties:</p>\n<pre><code class=\"hljs bash language-bash\">KEY dt.entity.cloud_application_instance VALUE {dt.entity.cloud_application_instance}\n\nKEY dt.entity.cloud_application_namespace VALUE {dt.entity.cloud_application_namespace}\n</code></pre>\n<p><img src=\"assets/log_10.png\" alt=\"Log 10\" /></p>\n<p>Execute the Log Ingest POST (x3)</p>\n<p>Navigate to <code>Problems</code> (refresh page) and look for the <code>Perform 2022 Log Error Event</code></p>\n<p><img src=\"assets/log_11.png\" alt=\"Log 11\" /></p>","activityList":[]},{"id":"4","name":"Prometheus\r","content":"<h2 id=\"prometheus\">Prometheus</h2>\n<h3 id=\"integratingdynatracewithprometheus\">Integrating Dynatrace With Prometheus</h3>\n<p>In this module we'll learn how to integrate Dynatrace with Prometheus in Kubernetes.</p>\n<ul>\n<li>Setup Node Exporter for Metric Ingest</li>\n<li>Setup ActiveGate to scrape Prometheus Metrics</li>\n<li>Setup Kube-state Metric Exporter for Metric Ingest</li>\n<li>Setup Nginx Exporter for Metric Ingest</li>\n<li>Visualize Metric in Dynatrace</li>\n</ul>\n<h3 id=\"setupprometheusexporterformetricingest\">Setup Prometheus Exporter For Metric Ingest</h3>\n<p>Let's explore how the promethues-node-exporter is exposing metrics.\nThere are some things we need to gather from the exporter:</p>\n<ul>\n<li>Port</li>\n<li>Metric Url Endpoint</li>\n</ul>\n<h4 id=\"step1identifyingportnodeexporter\">Step 1: Identifying Port - Node Exporter</h4>\n<p>Let's identify the port exposed by the Node Exporter.\nThe node exporter is deployed as a Daemonset by the Prometheus Operator.</p>\n<p>Run the kubectl command to get all daemonsets:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get ds\n</code></pre>\n<p><img src=\"assets/prom_1.png\" alt=\"Prometheus_1\" /></p>\n<p>If the name matches prometheus-node-exporter run the command below as written.  If not, update the name to match before executing.</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get ds prometheus-node-exporter -o jsonpath=<span class=\"hljs-string\">&#x27;{.spec.template.spec.containers[0].ports[].containerPort}{&quot;\\n&quot;}&#x27;</span>\n</code></pre>\n<p><img src=\"assets/prom_2.png\" alt=\"Prometheus_2\" /></p>\n<h4 id=\"step2validatetheprometheusmetricsbyexposingexporterporttolocalhost\">Step 2: Validate the prometheus metrics by exposing exporter port to localhost.</h4>\n<p>Run the kubectl command:</p>\n<pre><code class=\"hljs bash language-bash\">Kubectl get pod\n</code></pre>\n<p><img src=\"assets/prom_4.png\" alt=\"Prometheus_4\" /></p>\n<p>Copy the name of one of the prometheus-node-exporter pods, replace the {POD NAME} and {PORT} with the port identified above and run the command:</p>\n<ul>\n<li>This will expose the port to the host to be accessible on localhost.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">kubectl port-forward {POD NAME} {PORT}:{PORT}\n</code></pre>\n<p><img src=\"assets/prom_4.1.png\" alt=\"Prometheus_4.1\" /></p>\n<h4 id=\"step3testandidentifyingprometheusmetricurlendpoint\">Step 3: Test and identifying prometheus metric url endpoint</h4>\n<p>The Metric Url is typically /metrics. In our case it is /metrics.\nDuplicate the 'https://university.dynatrace.com/' tab, this should open another instance of the virtural classroom. Then terminal into the Bastion Host. Run the following curl command:</p>\n<pre><code class=\"hljs bash language-bash\">curl http://localhost:PORT/metrics\n</code></pre>\n<p><img src=\"assets/prom_3.png\" alt=\"Prometheus_3\" /></p>\n<p>The result should be a large output of available node exporter metrics:</p>\n<p><img src=\"assets/prom_3.3.png\" alt=\"Prometheus_3.3\" /></p>\n<h4 id=\"setupactivegatetoscrapeprometheusnodeexportermetrics\">Setup ActiveGate to scrape Prometheus-node-exporter Metrics</h4>\n<p>To be able to let the Active Gate scrape the prometheus metric from the node exporter, we need to :</p>\n<ul>\n<li>define the Dynatrace Annotations</li>\n<li>create a Service attach to the node exporters</li>\n</ul>\n<p>Use <code>vim</code> to edit the following file - <code>hotday_script/prometheus/serice_nodexporter_template.yaml</code>:</p>\n<pre><code class=\"hljs bash language-bash\">vim ~/hotday_script/prometheus/serice_nodexporter_template.yaml\n</code></pre>\n<p>Update the annotation section replacing the value of 'metric.dynatrace.com/port' annotation with the correct port, current value is TO_DEFINE.</p>\n<h5 id=\"before\">Before</h5>\n<pre><code class=\"hljs bash language-bash\">metadata:\n  annotations:\n    metrics.dynatrace.com/path: <span class=\"hljs-string\">&quot;/metrics&quot;</span>\n    metrics.dynatrace.com/port: <span class=\"hljs-string\">&quot;TO_DEFINE&quot;</span>\n    metrics.dynatrace.com/scrape: <span class=\"hljs-string\">&quot;true&quot;</span>\n</code></pre>\n<h5 id=\"afterreplaceto_definewithportidentified\">After (replace TO_DEFINE with port identified)</h5>\n<pre><code class=\"hljs bash language-bash\">metadata:\n  annotations:\n    metrics.dynatrace.com/path: <span class=\"hljs-string\">&quot;/metrics&quot;</span>\n    metrics.dynatrace.com/port: <span class=\"hljs-string\">&quot;9100&quot;</span>\n    metrics.dynatrace.com/scrape: <span class=\"hljs-string\">&quot;true&quot;</span>\n</code></pre>\n<p>Deploy the new Service :</p>\n<pre><code class=\"hljs bash language-bash\">kubectl apply -f ~/hotday_script/prometheus/serice_nodexporter_template.yaml\n</code></pre>\n<h4 id=\"setupkubestatemetricexporterformetricingest\">Setup Kube-state Metric Exporter for Metric Ingest</h4>\n<p>Similar steps to 'Setup Node Exporter for Metric Ingest'</p>\n<p>Run the describe kubectl command to identify port:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get deployment prometheus-kube-state-metrics -o jsonpath=<span class=\"hljs-string\">&#x27;{.spec.template.spec.containers[0].ports[].containerPort}{&quot;\\n&quot;}&#x27;</span>\n</code></pre>\n<p>Identify the pod name of the kube-state metric pod, replace the {POD NAME} and {PORT} with the port identified above and run the command:\nThis will expose the port to the host to be accessible on localhost.</p>\n<pre><code class=\"hljs bash language-bash\">kubectl port-forward {POD NAME} {PORT}:{PORT}\n</code></pre>\n<p>Verify the metrics are exposed by executing the curl command in the second terminal:</p>\n<pre><code class=\"hljs bash language-bash\">curl http://localhost:PORT/metrics\n</code></pre>\n<p>Use vim to update the <code>hotday_script/prometheus/service_template.yaml</code> file with the correct port:</p>\n<pre><code class=\"hljs bash language-bash\">vim ~/hotday_script/prometheus/service_template.yaml\n</code></pre>\n<p>replace TO_DEFINE with port identified in 1.</p>\n<p>Deploy the new Service :</p>\n<pre><code class=\"hljs bash language-bash\">kubectl apply -f ~/hotday_script/prometheus/service_template.yaml\n</code></pre>\n<h4 id=\"setupnginxexporterformetricingest\">Setup Nginx Exporter for Metric Ingest</h4>\n<p>Similar to above, we want to ingest metrics from the nginx ingress controller.\nIn the default namespace, nginx ingress controller has been deployed.</p>\n<p>Run the describe kubectl command to identify port:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get deployment nginx-nginx-ingress -o jsonpath=<span class=\"hljs-string\">&#x27;{.spec.template.spec.containers[0].ports[2].containerPort}{&quot;\\n&quot;}&#x27;</span>\n</code></pre>\n<p>Identify the pod name of the nginx-nginx-ingress pod, replace the {POD NAME} and {PORT} with the port identified above and run the command:</p>\n<pre><code class=\"hljs bash language-bash\"> kubectl port-forward {POD NAME} {PORT}:{PORT}\n</code></pre>\n<p>This will expose the port to the host to be accessible on localhost.</p>\n<p>Verify the metrics are exposed by executing the curl command in the second terminal:</p>\n<pre><code class=\"hljs bash language-bash\">curl http://localhost:PORT/metrics\n</code></pre>\n<p>Use vim to update the <code>hotday_script/prometheus/service__nginx_template.yaml</code> file with the correct port</p>\n<pre><code class=\"hljs bash language-bash\">vim ~/hotday_script/prometheus/service__nginx_template.yaml\n</code></pre>\n<p>Replace TO_DEFINE with port identified in 1.</p>\n<p>Deploy the new Service :</p>\n<pre><code class=\"hljs bash language-bash\">kubectl apply -f ~/hotday_script/prometheus/service__nginx_template.yaml\n</code></pre>\n<h3 id=\"visualizethemetricsindynatrace\">Visualize the metrics in Dynatrace</h3>\n<h4 id=\"metrics\">Metrics</h4>\n<p>All the ingested metrics can be found in \"Metrics\".</p>\n<p>Open <code>Metrics</code>, and search for:</p>\n<pre><code class=\"hljs bash language-bash\">kube_pod\n</code></pre>\n<p><img src=\"assets/prom_metrics_screen.png\" alt=\"prom_metrics_screen\" /></p>\n<h4 id=\"dataexplorer\">Data explorer</h4>\n<p>All available metrics can be dashboarded using the 'Data Explorer'</p>\n<p>Open 'Data Explorer', and search for:</p>\n<pre><code class=\"hljs bash language-bash\">kube_pod_status_phase\n</code></pre>\n<p><img src=\"assets/prom_5.png\" alt=\"Prometheus 5\" /></p>\n<p>Select the <code>kube_pod_status_phase</code> metric, and add the following <code>filter by</code> dimensions:</p>\n<pre><code class=\"hljs bash language-bash\">pod: frontend-xyz...\n\nphase: Running\n</code></pre>\n<p><img src=\"assets/prom_6.png\" alt=\"Prometheus 6\" /></p>\n<p>Select the visualization <code>single value</code></p>\n<p><img src=\"assets/prom_7.png\" alt=\"Prometheus 7\" /></p>\n<h4 id=\"nginxingresscontroller\">Nginx ingress controller</h4>\n<p>The current environment use a Nginx Ingress controller to expose the following services out of the cluster:</p>\n<ul>\n<li>the active gate (to be able to utilize the api) though the service <code>fluentd-activegate</code> located in the namespace <code>nondynatrace</code></li>\n<li>the hipster-shop through the service <code>frontend</code> located in the namespace <code>hipster-shop</code></li>\n</ul>\n<p>To understand the health of our ingress, it would be useful to be able to split any of the statistics by :</p>\n<ul>\n<li>the service name</li>\n<li>the name of the ingress</li>\n<li>the namespace of the ingress</li>\n</ul>\n<p>Create a <code>data explorer</code> chart for the following metric:</p>\n<pre><code class=\"hljs bash language-bash\">nginx_ingress_nginx_http_requests_total.count\n</code></pre>\n<p>In the Data explorer search for <code>nginx_ingress_nginx_http_requests_total.count</code></p>\n<p><img src=\"assets/prom_8.png\" alt=\"Prometheus 8\" /></p>\n<p>Do you have the right dimension to split the statistic by service name?</p>","activityList":[]},{"id":"5","name":"Logs: Integrating Fluentd and Dynatrace\r","content":"<h2 id=\"logsintegratingfluentdanddynatrace\">Logs: Integrating Fluentd and Dynatrace</h2>\n<p>In this module, we'll discover how Dynatrace integrates logs events fluentd in Kubernetes. As well as, we'll learn how to leverage these log events in Dynatrace by creating log metrics, log alerts and charting.</p>\n<h3 id=\"whatsinitforme\">What's in it for Me?</h3>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale. </p>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>Access to the <em>Bastion host</em></li>\n<li>Access to the acl-docs repository</li>\n</ul>","activityList":[{"id":"5.1","name":"What is Fluentd?\r","content":"<h2 id=\"whatisfluentd\">What is Fluentd?</h2>\n<p>An open-source log collector to unify logging layer.\nKey Features:</p>\n<ul>\n<li>Stores and structures data in JSON</li>\n<li>Pluggable Architecture allows for easily extending functionality</li>\n<li>Built-in Reliability</li>\n</ul>\n<h3 id=\"workingwithfluentd\">Working with Fluentd</h3>\n<p>In this module we'll:</p>\n<ul>\n<li>learn more about Fluentd</li>\n<li>update Fluentd to output metrics</li>\n<li>ingest these metrics with Dynatrace</li>\n<li>improve the log output further to trim away blank lines and format metrics</li>\n</ul>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure at any scale.</p>\n<h3 id=\"thescenario\">The scenario</h3>\n<p>The metrics exposed by our Nginx ingress controller are not providing the right dimensions to understand precisely how the traffic is split between the several services of our cluster.\nWe need to ingest the Nginx logs to see the full picture.</p>\n<h4 id=\"whatwearegoingtodointhelab\">What we are going to do in the lab</h4>\n<p>Nginx produces a standard logging format :</p>\n<pre><code class=\"hljs bash language-bash\">127.0.0.1 - - [10/Oct/2020:15:10:20 -0600] <span class=\"hljs-string\">&quot;HEAD / HTTP/1.1&quot;</span> 200 0 <span class=\"hljs-string\">&quot;&lt;https://example.com&gt;&quot;</span> <span class=\"hljs-string\">&quot;Mozilla/5.0...&quot;</span>\n</code></pre>\n<p>The logging format of nginx is structure with the help of nginx variables :</p>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-variable\">$remote_addr</span> - <span class=\"hljs-variable\">$remote_user</span> [<span class=\"hljs-variable\">$time_local</span>] <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$request</span>&quot;</span> <span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$http_referer</span>&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$http_user_agent</span>&quot;</span>\n</code></pre>\n<ul>\n<li>The logging format of Nginx could be adjusted by modifying the nginx configuration file.</li>\n<li>In kubernetes the configuration file is stored in a Config Map.</li>\n<li>In our cluster the nginx config map is called: <code>nginx-config</code></li>\n</ul>\n<p>To add extra information in the nginx log files add structure the logs by adding extra metadata :</p>\n<ul>\n<li>service name</li>\n<li>namespace of the ingress</li>\n<li>name of the ingress</li>\n<li>response time</li>\n<li>proxy host</li>\n<li>…etc</li>\n</ul>\n<p>Nginx has already been configured to produce the logs with our extra metadata :</p>\n<pre><code class=\"hljs bash language-bash\">log-format:\n----\n<span class=\"hljs-variable\">$remote_addr</span> [<span class=\"hljs-variable\">$time_local</span>] <span class=\"hljs-variable\">$request</span> <span class=\"hljs-variable\">$status</span> <span class=\"hljs-variable\">$body_bytes_sent</span> <span class=\"hljs-variable\">$request_time</span> <span class=\"hljs-variable\">$upstream_addr</span> <span class=\"hljs-variable\">$upstream_response_time</span> <span class=\"hljs-variable\">$proxy_host</span>  <span class=\"hljs-variable\">$upstream_status</span> <span class=\"hljs-variable\">$resource_name</span> <span class=\"hljs-variable\">$resource_type</span> <span class=\"hljs-variable\">$resource_namespace</span> <span class=\"hljs-variable\">$service</span>\n</code></pre>\n<h4 id=\"checkoutwhatisalreadyinplace\">Check out what is already in place</h4>\n<p>Open the Fluentd config map:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl edit cm fluentd-conf -n nondynatrace\n</code></pre>\n<p>Scroll a bit if necessary to find the starting <code>&lt;source&gt;</code> entries.  See below for key details.</p>\n<pre><code class=\"hljs bash language-bash\">...\n    &lt;<span class=\"hljs-built_in\">source</span>&gt;\n      @<span class=\"hljs-built_in\">type</span> tail\n      path /var/<span class=\"hljs-built_in\">log</span>/containers/*nginx*.<span class=\"hljs-built_in\">log</span>\n      pos_file /var/<span class=\"hljs-built_in\">log</span>/fluentd.pos\n      time_format %Y-%m-%dT%H:%M:%S.%NZ\n      tag nginx\n      &lt;parse&gt;\n        @<span class=\"hljs-built_in\">type</span> nginx\n        key_name <span class=\"hljs-built_in\">log</span>\n        reserve_data yes\n        expression  /^(?&lt;ip&gt;\\S+)\\s+\\[(?&lt;time_local&gt;[^\\]]*)\\]\\s+(?&lt;method&gt;\\S+)\\s+(?&lt;request&gt;\\S+)\\s+(?&lt;httpversion&gt;\\S*)\\s+(?&lt;status&gt;\\S*)\\s+(?&lt;bytes_sent&gt;\\S*)\\s+(?&lt;responsetime&gt;&gt;\n\n      &lt;/parse&gt;\n      read_from_head <span class=\"hljs-literal\">true</span>\n      keep_time_key <span class=\"hljs-literal\">true</span>\n    &lt;/<span class=\"hljs-built_in\">source</span>&gt;\n\n&lt;match nginx&gt;\n @<span class=\"hljs-built_in\">type</span> stdout\n&lt;/match&gt;\n...\n</code></pre>\n<ul>\n<li><code>path /var/log/containers/*nginx*.log</code> will only collect logs from containers having nginx in the pod name. Dynatrace natively ingests other logs on the system so we want to limit fluentd capture to only nginx.</li>\n<li><code>tail</code> is the fluentd plugin type that will follow the logs and get data.</li>\n<li><code>&lt;parse&gt; @type nginx</code> tells fluentd to use its nginx parsing engine.</li>\n<li><code>expression</code> formats the logs into a more readable format for fluentd.</li>\n<li><code>stdout</code> tells fluentd to send the logs to the container log to make it easy for us to read and see our changes as they occur.</li>\n</ul>\n<h3 id=\"labstep1extractlogdata\">LAB Step 1: Extract log data</h3>\n<p>With the basic log collector in place we first want to extract the metadata into fluentd <code>keys</code>.  This lets us use only what we need and provide useful names for the data.</p>\n<p>the operator <code>types</code> allow us to define for each key the type, like:</p>\n<ul>\n<li>string</li>\n<li>integer</li>\n<li>float</li>\n<li>time</li>\n<li>size</li>\n<li>bool</li>\n<li>…. etc</li>\n</ul>\n<p>From the current log stream pipeline add the <code>types</code> operator to define types to the various keys.</p>\n<p>If you closed the fluentd config map after viewing it above, open it with:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl edit cm fluentd-conf -n nondynatrace\n</code></pre>\n<p>Looking at the expression line you can see the first value is <code>&lt;ip&gt;</code>.  Checking out our types above, a string makes the most sense.  Add the following to your config after the <code>expression</code> line.</p>\n<pre><code class=\"hljs bash language-bash\">    types: ip:string,\n</code></pre>\n<p>Important <strong>NOTE</strong></p>\n<p>Make sure to space over so that <code>types</code> is <strong>directly</strong> under <code>expression</code>.</p>\n<pre><code class=\"hljs bash language-bash\">    expression /^ ......\n    types: ip:string,\n</code></pre>\n<p>Take a shot at adding the other types to the document.  Then check your work below:</p>\n<pre><code class=\"hljs bash language-bash\">    types ip:string,time_local:string,method:string,request:string,httpversion:string,status:string,bytes_sent:<span class=\"hljs-built_in\">integer</span>,responsetime:<span class=\"hljs-built_in\">float</span>,proxy:string,upstream_responsetime:<span class=\"hljs-built_in\">integer</span>,resourcename:string,upstream_status:string,ingress_name:string,resource_type:string,resource_namespace:string,service:string\n</code></pre>\n<p>Type :wq <em>enter</em> to save and exit.</p>\n<p>Use this command to delete the fluentd pods.  This will recreate them with the new configuration.</p>\n<pre><code class=\"hljs bash language-bash\">kubectl delete pods -n nondynatrace -l app=fluentd-pipeline\n</code></pre>\n<p>You should see two pods deletion notices.  You can ensure they restart with:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get pods -n nondynatrace\n</code></pre>\n<p>You might have to run this more than one time until you see <code>Running</code> for all pods.</p>\n<p>Since there are two fluentd pods running, we need to pick the one attached to nginx.  This command gives us all of the pods and their nodes:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces\n</code></pre>\n<p>Find your nginx pod and it's associated node.  Find the fluentd pod with the same node (IP address):</p>\n<p><img src=\"assets/nginx-to-fluentd.png\" alt=\"Prometheus_1\" /></p>\n<p>Shows the logs from that pod:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl logs &lt;pod&gt; -n nondynatrace -f\n</code></pre>\n<p>The <code>-f</code> command will follow the logs until you press <em>ctrl-c</em> to quit.</p>\n<p>PSST.  Hey buddy…. you wanna buy an enormous command to impress your friends?  You can skip the commands and matching up nodes above. This single command finds the fluentd pod running in your nginx node and output the logs.  If anybody asks, you didn't hear this from me, OK?</p>\n<pre><code class=\"hljs bash language-bash\">kubectl logs $(kubectl get pods -A -l app=fluentd-pipeline -o wide --field-selector spec.nodeName=$(kubectl get pod -o=custom-columns=NODE:.spec.nodeName --selector=app=nginx-nginx-ingress --no-headers) -o=custom-columns=Name:.metadata.name --no-headers) -n nondynatrace -f\n</code></pre>\n<p>Check that you don't have any errors from fluentd.  If you do, there is usually something wrong with the yaml file.  Check your spacing.\nIf you don't see hits coming in, confirm you are generating traffic in another terminal.  <strong>If it stopped</strong>, start it again with:</p>\n<pre><code class=\"hljs bash language-bash\">~/hotday_script/load/generateTraffic.sh\n</code></pre>\n<p>Most of the lines will have the same type of data.  But it's easy to confirm it worked if your <em>responsetime</em> fields now have decimals i.e. <code>\"0.027\"</code>.  That means fluentd extracted the responsetime value, changed it to a numeric (integer) format and exported it.</p>\n<h3 id=\"labstep2improvethedataquality\">Lab Step 2: Improve the data quality</h3>\n<p>Now that we have a nice data stream, we can improve it further.</p>\n<h4 id=\"updatethetimekey\">Update the time key</h4>\n<p>fluentd parser plugin can also extract which key contains the date with <code>time_key</code>.\nReopen the config map with:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl edit cm fluentd-conf -n nondynatrace\n</code></pre>\n<p>Let's modify our current fluentd pipeline by adding a <code>time_key</code> and <code>time_format</code> line after the <code>types</code> operator :</p>\n<pre><code class=\"hljs bash language-bash\">    types: ip:string,time_local:string, ...\n    time_key time_local\n    time_format %d/%b/%Y:%H:%M:%S %z\n</code></pre>\n<p>As always, make sure the spacing is perfect and the new lines are directly under <code>types</code>.</p>\n<h4 id=\"defineaprometheusoutputplugin\">Define a Prometheus output plugin</h4>\n<p>Fluentd has a Prometheus plugin that is able to :</p>\n<ul>\n<li>create a prometheus exporter on the fluentd agent</li>\n<li>expose statistics related to the log stream pipeline</li>\n<li>expose custom metrics</li>\n</ul>\n<p>Add a new <code>source</code> entry directly under the ending of the previous <code>&lt;/source&gt;</code>  :</p>\n<pre><code class=\"hljs bash language-bash\">      ...\n      keep_time_key <span class=\"hljs-literal\">true</span>\n    &lt;/<span class=\"hljs-built_in\">source</span>&gt;\n\n    &lt;<span class=\"hljs-built_in\">source</span>&gt;\n      @<span class=\"hljs-built_in\">type</span> prometheus\n      <span class=\"hljs-built_in\">bind</span> 0.0.0.0\n      port 9914\n      metrics_path /metrics\n    &lt;/<span class=\"hljs-built_in\">source</span>&gt;\n</code></pre>\n<h4 id=\"aboutfluentdfilters\">About fluentd filters</h4>\n<p>We'll further improve the data quality by adding a filter to our log output.  This allows us to:</p>\n<ul>\n<li>add labels to the data.</li>\n<li>define dimensions for our metrics so the data we output to Dynatrace can be sliced and diced.</li>\n<li>exclude lines from the logs that aren't helpful or blank.</li>\n</ul>\n<p>The filter itself is simply added as a new section under the last source:</p>\n<pre><code class=\"hljs bash language-bash\">&lt;filter  nginx&gt;\n @<span class=\"hljs-built_in\">type</span> prometheus\n\n&lt;/filter&gt;\n</code></pre>\n<p>To expose metrics we need to define the metric using <code>metric</code>\nA metric requires several properties :</p>\n<ul>\n<li>name</li>\n<li>description</li>\n<li>type : counter, gauge, histogram, summary</li>\n<li>the key ( optional)</li>\n</ul>\n<p>for example :</p>\n<pre><code class=\"hljs bash language-bash\">&lt;metric&gt;\n    name byte_sent\n    <span class=\"hljs-built_in\">type</span> gauge\n    desc byte sent\n    key bytes_sent\n&lt;/metric&gt;\n</code></pre>\n<p>Labels for our metrics can be either:</p>\n<ul>\n<li><em>inside</em> the metric object for a specific label related to that metric</li>\n<li><em>outside</em> the metric object for common labels for all the metric defined in our pipeline</li>\n</ul>\n<p>For example, the labels shown here (pulled from the keys we created earlier) will be applied to metrics that follow.</p>\n<pre><code class=\"hljs bash language-bash\">&lt;filter  nginx&gt;\n @<span class=\"hljs-built_in\">type</span> prometheus\n &lt;labels&gt;\n   method <span class=\"hljs-variable\">${method}</span>\n   request <span class=\"hljs-variable\">${request}</span>\n   status <span class=\"hljs-variable\">${status}</span>\n &lt;/labels&gt;\n &lt;metric&gt;\n   name hotday_response_time\n   <span class=\"hljs-built_in\">type</span> gauge\n   desc responset time\n   key responsetime\n &lt;/metric&gt;\n&lt;/filter&gt;\n</code></pre>\n<h3 id=\"labstep3addingafilterlabelsandmetrics\">Lab Step 3: Adding a filter, labels, and metrics</h3>\n<p>Let's build out this framework.  Our goal is to have metrics for response time, bytes sent, status, and total requests.  We want to label them with method, request, status, namespace, service, and resourcename.</p>\n<p>To get started, add a <code>filter</code> after the last <code>&lt;source&gt;</code>.  It should look like:</p>\n<pre><code class=\"hljs bash language-bash\">&lt;/<span class=\"hljs-built_in\">source</span>&gt; (the last one!)\n\n&lt;filter nginx&gt;\n  @<span class=\"hljs-built_in\">type</span> prometheus\n&lt;/filter&gt;\n</code></pre>\n<p>As always, ensure the filter starts on the same column as the source was!</p>\n<p>Here is how our first label (method) and first metric (response time) would look in this section:</p>\n<pre><code class=\"hljs bash language-bash\">&lt;filter nginx&gt;\n  @<span class=\"hljs-built_in\">type</span> prometheus\n  &lt;labels&gt;\n    method <span class=\"hljs-variable\">${method}</span>\n  &lt;/labels&gt;\n  &lt;metric&gt;\n    name hotday_response_time\n    <span class=\"hljs-built_in\">type</span> gauge\n    desc response time\n    key responsetime\n  &lt;/metric&gt;\n&lt;/filter&gt;\n</code></pre>\n<p>Take a shot at labels for request, status, namespace, service, and resourcename.  Remember these are based on the keys you created earlier!</p>\n<p>Then add metrics for bytes sent, total requests, and status.  The gauge types you would use are either <code>gauge</code> or <code>counter</code> for these metrics.</p>\n<p>No peeking! :)  But check your work against the completed filter below:</p>\n<pre><code class=\"hljs bash language-bash\">&lt;filter nginx&gt;\n  @<span class=\"hljs-built_in\">type</span> prometheus\n    &lt;labels&gt;\n      method <span class=\"hljs-variable\">${method}</span>\n      request <span class=\"hljs-variable\">${request}</span>\n      status <span class=\"hljs-variable\">${status}</span>\n      namespace <span class=\"hljs-variable\">${resource_namespace}</span>\n      service <span class=\"hljs-variable\">${service}</span>\n      resourcename <span class=\"hljs-variable\">${resourcename}</span>\n    &lt;/labels&gt;\n    &lt;metric&gt;\n      name hotday_response_time\n      <span class=\"hljs-built_in\">type</span> gauge\n      desc responset time\n      key responsetime\n    &lt;/metric&gt;\n    &lt;metric&gt;\n      name hotday_byte_sent\n      <span class=\"hljs-built_in\">type</span> gauge\n      desc byte sent\n      key bytes_sent\n    &lt;/metric&gt;\n    &lt;metric&gt;\n      name hotday_requests\n      <span class=\"hljs-built_in\">type</span> counter\n      desc The total number of request\n    &lt;/metric&gt;\n    &lt;metric&gt;\n      name hotday_status\n      <span class=\"hljs-built_in\">type</span> counter\n      desc status code\n      key status\n    &lt;/metric&gt;\n&lt;/filter&gt;\n</code></pre>\n<p>Just like before, we need to delete the old fluentd pods:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl delete pods -n nondynatrace -l app=fluentd-pipeline\n</code></pre>\n<p>Check out the logs by finding the correct fluentd pod (the one in same node as nginx) with:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces\n</code></pre>\n<p>And tailing the logs with:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl logs &lt;pod&gt; -n nondynatrace -f\n</code></pre>\n<p>or use the all-in-one command:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl logs $(kubectl get pods -A -l app=fluentd-pipeline -o wide --field-selector spec.nodeName=$(kubectl get pod -o=custom-columns=NODE:.spec.nodeName --selector=app=nginx-nginx-ingress --no-headers) -o=custom-columns=Name:.metadata.name --no-headers) -n nondynatrace -f\n</code></pre>\n<p>If the logs have errors, check your yaml to make sure everything is lined up.  If you don't see traffic, confirm your traffic generator is running and start it again if needed with:</p>\n<pre><code class=\"hljs bash language-bash\">~/hotday_script/load/generateTraffic.sh\n</code></pre>\n<h4 id=\"createaservicewithdynatraceprometheusannotationtoingestthegeneratedmetrics\">Create a service with dynatrace Prometheus annotation to ingest the generated metrics</h4>\n<p>We need to update the port of the fluentd exporter similar to the prometheus exercise before.</p>\n<p>The node exporter is deployed as a Daemonset by the Prometheus Operator.\nRun the kubectl command to get the daemonsets:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl get ds -A\n</code></pre>\n<p><img src=\"assets/fluentd_ds.png\" alt=\"FluentD_1\" /></p>\n<p>If the result is fluentd, run the command below as-is.  Otherwise update the name before running.</p>\n<ul>\n<li>This will get the container port for the fluentd daemonset.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">kubectl get ds fluentd -o jsonpath=<span class=\"hljs-string\">&#x27;{.spec.template.spec.containers[0].ports[].containerPort}{&quot;\\n&quot;}&#x27;</span> -n nondynatrace\n</code></pre>\n<p><img src=\"assets/fluentd_port.png\" alt=\"FluentD_2\" /></p>\n<p>Open the configuration file below and replace the port.</p>\n<pre><code class=\"hljs bash language-bash\">vi ~/hotday_script/prometheus/service_fluentd_metric.yaml\n</code></pre>\n<p>After the update, the port line should be similar to:</p>\n<pre><code class=\"hljs bash language-bash\">    metrics.dynatrace.com/port: <span class=\"hljs-string\">&quot;9914&quot;</span>\n</code></pre>\n<p>Then apply the config file with :</p>\n<pre><code class=\"hljs bash language-bash\">kubectl apply -f ~/hotday_script/prometheus/service_fluentd_metric.yaml -n nondynatrace\n</code></pre>\n<h4 id=\"createagraphutilizingthenewnginxmetrics\">Create a graph utilizing the new nginx metrics</h4>\n<p>Check the terminal window where you are generating traffic to confirm it's still running.  If it stopped for some reason you can start it again with:</p>\n<pre><code class=\"hljs bash language-bash\">~/hotday_script/load/generateTraffic.sh\n</code></pre>\n<h4 id=\"createagraphshowingthe90thpercentileoftheresponsetimesplitbyservice\">Create a Graph showing the 90th percentile of the response time split by service</h4>\n<p>Go to the Data Explorer and search for the new metric: <code>hotday_response_time</code></p>\n<p>Create a graph with :</p>\n<ul>\n<li>aggregator : Percentile 90th</li>\n<li>Split by : service</li>\n</ul>\n<p><img src=\"assets/dt_fluentd_metrics.png\" alt=\"fluentd_1_1\" /></p>\n<h4 id=\"createapiegraphshowingthestatuscodeperservices\">Create a Pie graph showing the status code per services</h4>\n<p>Go to the Data Explorer and search for the new metric: <code>hotday_requests</code></p>\n<p>Create a graph with :</p>\n<ul>\n<li>aggregator : Count</li>\n<li>Split by : status,service</li>\n</ul>\n<p><img src=\"assets/dtu_fluentd_metrics_status.png\" alt=\"fluentd_1_2\" /></p>","activityList":[]},{"id":"5.2","name":"Logs: Integrating Fluentd and Dynatrace\r","content":"<h2 id=\"logsintegratingfluentdanddynatrace\">Logs: Integrating Fluentd and Dynatrace</h2>\n<p>In this module we'll learn how to integrate Dynatrace with Fluentd in Kubernetes.</p>\n<h3 id=\"whatsinitforme\">What's in it for Me?</h3>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale.</p>\n<p>We will update our previous log stream pipeline to forward the generated log to dynatrace</p>\n<h3 id=\"objective\">Objective</h3>\n<p>This exercise will :</p>\n<ul>\n<li>modify our current fluentd pipeline</li>\n<li>utilize the log v2 viewer</li>\n<li>create a dynatrace metric out of logs</li>\n</ul>\n<h4 id=\"restructuringthelogstream\">Restructuring the log stream</h4>\n<p>Fluentd has a output plugin dynatrace that will forward the generated log to the logs ingest API.\nThe log ingest API requires a specific format :</p>\n<pre><code class=\"hljs bash language-bash\">{\n<span class=\"hljs-string\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;example log content 1&quot;</span>,\n<span class=\"hljs-string\">&quot;status&quot;</span> : <span class=\"hljs-string\">&quot;error&quot;</span>,\n<span class=\"hljs-string\">&quot;k8s.pod.name&quot;</span>:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$PODNAME</span>&quot;</span>,\n<span class=\"hljs-string\">&quot;k8s.namespace.uid&quot;</span>:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NAMESPACEID</span>&quot;</span>,\n<span class=\"hljs-string\">&quot;dt.kubernetes.node.name&quot;</span>:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$NODENAME</span>&quot;</span>,\n<span class=\"hljs-string\">&quot;dt.kubernetes.cluster.id&quot;</span>:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$CLUSTERID</span>&quot;</span>,\n<span class=\"hljs-string\">&quot;dt.kubernetes.node.system_uuid&quot;</span>:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DTNODEID</span>&quot;</span>,\n<span class=\"hljs-string\">&quot;log.source&quot;</span>: <span class=\"hljs-string\">&quot;/var/log/syslog&quot;</span>,\n<span class=\"hljs-string\">&quot;dt.entity.host&quot;</span> : <span class=\"hljs-string\">&quot;&lt;HOST ID&gt;&quot;</span>,\n<span class=\"hljs-string\">&quot;dt.entity.process_group_instance&quot;</span>: <span class=\"hljs-string\">&quot;&lt;PG_ID&gt;&quot;</span>\n<span class=\"hljs-string\">&quot;response&quot;</span>:12\n}\n</code></pre>\n<ul>\n<li>The property content will have the value of our log.</li>\n<li>Status is optional but helps to filter our content.</li>\n<li>Log.source is also optional.</li>\n<li>The other labels are there to help dynatrace to index the log stream to the right entity.</li>\n</ul>\n<p>We can add as many extra properties to attach extra labels related to our log stream.\nSeveral labels will be used to index the log stream to a given Dynatrace entity.</p>\n<h4 id=\"howtorestructureourlogs\">How to restructure our logs</h4>\n<p>Fluentd has a plugin that will helps us to restructure the produced log stream : <code>record_transformer</code></p>\n<pre><code class=\"hljs bash language-bash\">@<span class=\"hljs-built_in\">type</span> record_transformer\nenable_ruby <span class=\"hljs-literal\">true</span>\n&lt;record&gt;\ncontent <span class=\"hljs-variable\">${record[&quot;method&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;request&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;status&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;bytes_sent&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;responsetime&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span>\n&lt;/record&gt;\n</code></pre>\n<p><code>&lt;record&gt;&lt;/record&gt;</code> will help us to re structure our log stream before sending it to dynatrace.</p>\n<p>In the record object you can add any number of labels.</p>\n<pre><code class=\"hljs bash language-bash\">&lt;record&gt;\nlabelname value\n&lt;/record&gt;\n</code></pre>\n<p>record can retrieve the value of existing fluentd keys with :</p>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-variable\">${record[&quot;keyname&quot;]}</span>\n</code></pre>\n<p>To fully index a log stream to a Pod, node, k8s cluster it is required to add the following labels :</p>\n<ul>\n<li><code>dt.kubernetes.node.name</code></li>\n<li><code>dt.kubernetes.node.system_uuid</code></li>\n<li><code>k8s.pod.labels</code></li>\n<li><code>dt.kubernetes.cluster.id</code></li>\n<li><code>k8s.namespace.uid</code></li>\n<li><code>k8s.namespace.name</code></li>\n<li><code>k8s.pod.name</code></li>\n<li><code>k8s.pod.uid</code></li>\n</ul>\n<p>To add this filter, edit your fluentd config map:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl edit cm fluentd-conf -n nondynatrace\n</code></pre>\n<p>Below your super awesome nginx filter with the labels and defined metrics, add this section:</p>\n<pre><code class=\"hljs bash language-bash\">     &lt;filter nginx&gt;\n       @<span class=\"hljs-built_in\">type</span> record_transformer\n       enable_ruby <span class=\"hljs-literal\">true</span>\n       &lt;record&gt;\n         status <span class=\"hljs-variable\">${ record.dig(:log, :severity) || record.dig(:log, :level) || (record[&quot;log&quot;] =~ /\\W?\\berror\\b\\W?/i ? &quot;ERROR&quot; : (record[&quot;log&quot;] =~ /\\W?\\bwarn\\b\\W?/i ? &quot;WARN&quot; : (record[&quot;log&quot;] =~ /\\W?\\bdebug\\b\\W?/i ? &quot;DEBUG&quot; : (record[&quot;log&quot;] =~ /\\W?\\binfo\\b\\W?/i ? &quot;INFO&quot; : &quot;NONE&quot;)))) }</span>\n         content <span class=\"hljs-variable\">${record[&quot;method&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;request&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;status&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;bytes_sent&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;responsetime&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span>\n         dt.kubernetes.node.system_uuid <span class=\"hljs-variable\">${File.read(&quot;/sys/devices/virtual/dmi/id/product_uuid&quot;).strip}</span>\n         dt.kubernetes.cluster.id <span class=\"hljs-string\">&quot;#{ENV[&#x27;CLUSTER_ID&#x27;]}&quot;</span>\n         k8s.namespace.name <span class=\"hljs-variable\">${record[&quot;resource_namespace&quot;]}</span>\n         k8s.service.name <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span>\n       &lt;/record&gt;\n       remove_keys  nginx\n     &lt;/filter&gt;\n</code></pre>\n<ul>\n<li>The status line looks like a lot!  But it simply uses an <code>or</code> ( || ) command to normalize the status into one of error/warn/debug/info.</li>\n<li>The content line combines several fields that we want to export into a single \"packet\" of data.</li>\n<li>The remaining fields are split out individuals because they are used individually by Dynatrace to index and dimension data.</li>\n</ul>\n<p>Incidentally, if your log stream does not have the details limit to the available information you can easily retrieve the to fields with :</p>\n<pre><code class=\"hljs bash language-bash\">dt.kubernetes.cluster.id <span class=\"hljs-string\">&quot;#{ENV[&#x27;CLUSTER_ID&#x27;]}&quot;</span>\ndt.kubernetes.node.system_uuid <span class=\"hljs-variable\">${File.read(&quot;/sys/devices/virtual/dmi/id/product_uuid&quot;).strip}</span>\n</code></pre>\n<h4 id=\"removelogstreamsthatarenotrelatedtohttptrafficgoingthroughtheingress\">remove log streams that are not related to http traffic going through the ingress</h4>\n<p>Every request coming in our ingress are normally made to be routed to a specific service.\nNginx could also log k8s health, live checks that won't mach any of our back-end rule.\nTherefore, to avoid pushing non-meaningful or non structured data, we should filter http request that won't route ( without ingress name, service, …etc)</p>\n<p>Fluentd has a filter plugin <code>grep</code> that will help us to exclude data.</p>\n<pre><code class=\"hljs bash language-bash\">&lt;filter nginx&gt;\n    @<span class=\"hljs-built_in\">type</span> grep\n    &lt;exclude&gt;\n\n    &lt;/exclude&gt;\n&lt;/filter&gt;\n</code></pre>\n<p>The exclusion rules requires specifying with log stream we want to apply a grep pattern :</p>\n<pre><code class=\"hljs bash language-bash\">&lt;filter nginx&gt;\n    @<span class=\"hljs-built_in\">type</span> grep\n    &lt;exclude&gt;\n          key log_streamkey\n          pattern /regexp/\n    &lt;/exclude&gt;\n&lt;/filter&gt;\n</code></pre>\n<p>In our example we would like to filter the logs stream where the key service is empty.</p>\n<p>The regexp excluding empty string is : <code>/^$/</code></p>\n<p>Modify the logstream pipeline by adding the filter that will exclude log stream having an empty service right above your <code>record transformer filter</code>:</p>\n<pre><code class=\"hljs bash language-bash\">     &lt;filter nginx&gt;\n        @<span class=\"hljs-built_in\">type</span> grep\n          &lt;exclude&gt;\n          key service\n          pattern /^$/\n          &lt;/exclude&gt;\n     &lt;/filter&gt;\n\n     &lt;filter nginx&gt; (following filter already there- <span class=\"hljs-keyword\">do</span> not add!)\n</code></pre>\n<h4 id=\"addtherecordtransformertoyourlogstream\">Add the record transformer to your logstream</h4>\n<p><img src=\"assets/dt_fluentd_record_transformer.png\" alt=\"fluentd_2_1\" /></p>\n<h4 id=\"addthedynatraceoutputplugin\">Add the dynatrace output plugin</h4>\n<p>Now that we're done building our environment we want to stop exporting everything to stdout and send it to Dynatrace instead.\nThe fluentd container deployed in the cluster has already the dynatrace plugin installed.\nThe fluentd plugin is opensource and documented <a href=\"https://github.com/dynatrace-oss/fluent-plugin-dynatrace\">here</a></p>\n<p>The plugin will have specific propeties to define :</p>\n<ul>\n<li>the url of your activegate-</li>\n<li>the api_token ( having the log ingest right)</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">&lt;match nginx&gt;\n    @<span class=\"hljs-built_in\">type</span>              dynatrace\n    active_gate_url <span class=\"hljs-string\">&quot;#{ENV[&#x27;AG_INGEST_URL&#x27;]}&quot;</span>\n    api_token <span class=\"hljs-string\">&quot;#{ENV[&#x27;LOG_INGEST_TOKEN&#x27;]}&quot;</span>\n    ssl_verify_none    <span class=\"hljs-literal\">true</span>\n&lt;/match&gt;\n</code></pre>\n<p>Remove the match using the stdout plugin and replace it with dynatrace plugin (code above).</p>\n<p>Remember to reset your fluentd pods:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl delete pods -n nondynatrace -l app=fluentd-pipeline\n</code></pre>\n<p>If your load generator script stopped, start it up again in another terminal:</p>\n<pre><code class=\"hljs bash language-bash\">~/hotday_script/load/generateTraffic.sh\n</code></pre>\n<h3 id=\"logviewer\">Log viewer</h3>\n<p>All the ingested logs from the dynatrace Operator and from fluentd will be available in the Log viewer.\nClick on the left menu Observe and Explore/Logs\n<img src=\"assets/dt_fluentd_logviewer.png\" alt=\"fluentd_2_2\" /></p>\n<h4 id=\"filterthelogstoseeourlogs\">Filter the logs to see our logs</h4>\n<p>To create a metric out of a log stream requires to create the right log filter.\nLook a the log properties of fluentd, and create the filter that will only show logs related to our application.\n<img src=\"assets/dt_fluentd_log_detail.png\" alt=\"fluentd_2_3\" /></p>\n<h4 id=\"createametricoutofourlogs\">Create a metric out of our logs</h4>\n<p>Create a metric exposing the label <code>responsetime</code> time ingested by dynatrace\n<img src=\"assets/dt_fluentd_log_create_metric.png\" alt=\"fluentd_2_4\" /></p>\n<h4 id=\"createtraffictogeneratenewlogs\">Create traffic to generate new logs</h4>\n<p>THe metric only exists from the moment new log stream has been ingested by dynatrace.\nConfirm that you are generating traffic or restart it with:</p>\n<pre><code class=\"hljs bash language-bash\">/hotday_script/load/generateTraffic.sh\n</code></pre>\n<p>Once the metric exist go to the Data explorer and create a new Graph with your metric.</p>\n<h3 id=\"forreference\">For Reference</h3>\n<p>The completed fluentd-conf map can be deployed via:</p>\n<pre><code class=\"hljs bash language-bash\">kubectl apply -f ~/hotday_script/fluentd/fluentd-configmap-dynatrace.yaml\n</code></pre>\n<p>Here is the full config map for fluentd-conf:</p>\n<pre><code class=\"hljs bash language-bash\">apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fluentd-conf\n  namespace: nondynatrace\n  labels:\n    app: fluentd\n    component: fluentd-conf\ndata:\n  CLUSTER_ID: <span class=\"hljs-string\">&quot;CLUSTER_ID_TO_REPLACE&quot;</span>\n  AG_INGEST_URL: <span class=\"hljs-string\">&quot;https://fluentd-activegate:9999/e/ENVIRONMENT_ID_TO_REPLACE/api/v2/logs/ingest&quot;</span>\n  fluent.conf: |-\n    <span class=\"hljs-comment\"># Ingest logs from nodes</span>\n     &lt;match fluent.**&gt;\n      @<span class=\"hljs-built_in\">type</span> null\n     &lt;/match&gt;\n     &lt;<span class=\"hljs-built_in\">source</span>&gt;\n       @<span class=\"hljs-built_in\">type</span> tail\n       path /var/<span class=\"hljs-built_in\">log</span>/containers/*nginx*.<span class=\"hljs-built_in\">log</span>\n       pos_file /var/<span class=\"hljs-built_in\">log</span>/fluentd.pos\n       time_format %Y-%m-%dT%H:%M:%S.%NZ\n       read_from_head <span class=\"hljs-literal\">true</span>\n       tag nginx\n       keep_time_key <span class=\"hljs-literal\">true</span>\n     &lt;parse&gt;\n       @<span class=\"hljs-built_in\">type</span> nginx\n       reserve_data yes\n       expression  /^(?&lt;ip&gt;\\S+)\\s+\\[(?&lt;time_local&gt;[^\\]]*)\\]\\s+(?&lt;method&gt;\\S+)\\s+(?&lt;request&gt;\\S+)\\s+(?&lt;httpversion&gt;\\S*)\\s+(?&lt;status&gt;\\S*)\\s+(?&lt;bytes_sent&gt;\\S*)\\s+(?&lt;responsetime&gt;\\S*)\\s+(?&lt;proxy&gt;\\S*)\\s+(?&lt;upstream_responsetime&gt;\\S*)\\s+(?&lt;resourcename&gt;\\S*)\\s+(?&lt;upstream_status&gt;\\S*)\\s+(?&lt;ingress_name&gt;\\S*)\\s+(?&lt;resource_type&gt;\\S*)\\s+(?&lt;resource_namespace&gt;\\S*)\\s+(?&lt;service&gt;\\w*)/\n       types ip:string,time_local:string,method:string,request:string,httpversion:string,status:string,bytes_sent:<span class=\"hljs-built_in\">integer</span>,responsetime:<span class=\"hljs-built_in\">float</span>,proxy:string,upstream_responsetime:<span class=\"hljs-built_in\">integer</span>,resourcename:string,upstream_status:string,ingress_name:string,resource_type:string,resource_namespace:string,service:string\n       time_key time_local\n       time_format %d/%b/%Y:%H:%M:%S %z\n     &lt;/parse&gt;\n     &lt;/<span class=\"hljs-built_in\">source</span>&gt;\n     &lt;<span class=\"hljs-built_in\">source</span>&gt;\n       @<span class=\"hljs-built_in\">type</span> prometheus\n       <span class=\"hljs-built_in\">bind</span> 0.0.0.0\n       port 9914\n       metrics_path /metrics\n     &lt;/<span class=\"hljs-built_in\">source</span>&gt;\n     &lt;filter nginx&gt;\n       @<span class=\"hljs-built_in\">type</span> kubernetes_metadata\n     &lt;/filter&gt;\n     &lt;filter  nginx&gt;\n      @<span class=\"hljs-built_in\">type</span> prometheus\n       &lt;labels&gt;\n         method <span class=\"hljs-variable\">${method}</span>\n         request <span class=\"hljs-variable\">${request}</span>\n         status <span class=\"hljs-variable\">${status}</span>\n         namespace <span class=\"hljs-variable\">${resource_namespace}</span>\n         service <span class=\"hljs-variable\">${service}</span>\n         ressourcename <span class=\"hljs-variable\">${resourcename}</span>\n       &lt;/labels&gt;\n       &lt;metric&gt;\n         name hotday_response_time\n         <span class=\"hljs-built_in\">type</span> gauge\n         desc response time\n         key responsetime\n       &lt;/metric&gt;\n       &lt;metric&gt;\n         name hotday_byte_sent\n         <span class=\"hljs-built_in\">type</span> gauge\n         desc byte sent\n         key bytes_sent\n       &lt;/metric&gt;\n       &lt;metric&gt;\n         name hotday_requests\n         <span class=\"hljs-built_in\">type</span> counter\n         desc The total number of request\n       &lt;/metric&gt;\n       &lt;metric&gt;\n         name hotday_status\n         <span class=\"hljs-built_in\">type</span> counter\n         desc status code\n         key status\n       &lt;/metric&gt;\n     &lt;/filter&gt;\n     &lt;filter nginx&gt;\n        @<span class=\"hljs-built_in\">type</span> grep\n          &lt;exclude&gt;\n          key service\n          pattern /^$/\n          <span class=\"hljs-comment\"># or, to exclude all messages that are empty or include only white-space:</span>\n          &lt;/exclude&gt;\n     &lt;/filter&gt;\n     &lt;filter nginx&gt;\n       @<span class=\"hljs-built_in\">type</span> record_transformer\n       enable_ruby <span class=\"hljs-literal\">true</span>\n       &lt;record&gt;\n         status <span class=\"hljs-variable\">${ record.dig(:log, :severity) || record.dig(:log, :level) || (record[&quot;log&quot;] =~ /\\W?\\berror\\b\\W?/i ? &quot;ERROR&quot; : (record[&quot;log&quot;] =~ /\\W?\\bwarn\\b\\W?/i ? &quot;WARN&quot; : (record[&quot;log&quot;] =~ /\\W?\\bdebug\\b\\W?/i ? &quot;DEBUG&quot; : (record[&quot;log&quot;] =~ /\\W?\\binfo\\b\\W?/i ? &quot;INFO&quot; : &quot;NONE&quot;)))) }</span>\n         content <span class=\"hljs-variable\">${record[&quot;method&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;request&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;status&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;bytes_sent&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;responsetime&quot;]}</span> <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span>\n         dt.kubernetes.node.system_uuid <span class=\"hljs-variable\">${File.read(&quot;/sys/devices/virtual/dmi/id/product_uuid&quot;).strip}</span>\n         dt.kubernetes.cluster.id <span class=\"hljs-string\">&quot;#{ENV[&#x27;CLUSTER_ID&#x27;]}&quot;</span>\n         k8s.namespace.name <span class=\"hljs-variable\">${record[&quot;resource_namespace&quot;]}</span>\n         k8s.service.name <span class=\"hljs-variable\">${record[&quot;service&quot;]}</span>\n       &lt;/record&gt;\n       remove_keys  nginx\n     &lt;/filter&gt;\n     &lt;match nginx&gt;\n       @<span class=\"hljs-built_in\">type</span>              dynatrace\n       active_gate_url <span class=\"hljs-string\">&quot;#{ENV[&#x27;AG_INGEST_URL&#x27;]}&quot;</span>\n       api_token <span class=\"hljs-string\">&quot;#{ENV[&#x27;LOG_INGEST_TOKEN&#x27;]}&quot;</span>\n       ssl_verify_none    <span class=\"hljs-literal\">true</span>\n     &lt;/match&gt;\n</code></pre>","activityList":[]}]}]
[{"id":"1","name":"Getting Started\r","content":"<h2 id=\"gettingstarted\">Getting Started</h2>\n<h3 id=\"tipswhenworkinginthevirturalclassroom\">Tips when working in the virtural classroom</h3>\n<ol>\n<li>Use your mouse to right-click copy/paste. Keyboard ctrl+c or ctrl+v will not work.</li>\n<li>The Bastion Host can be accessed by navigating to 'Environments' in the virtural classroom, clicking on 'Open Terminal'.</li>\n<li>The Dynatrace envrionment can be accessed by navigating to 'Environments' in the virtural classroom, clicking on 'View Environment'.\n<img src=\"assets/started_1.png\" alt=\"started 1\" /></li>\n<li>You can open multiple terminals, by duplicating the 'https://university.dynatrace.com/' and opening the terminal.</li>\n<li>The HoT session lab guides are found under 'Activities'\n<img src=\"assets/started_2.png\" alt=\"started 2\" /></li>\n<li>Editing files can be done by using 'vim'.</li>\n</ol>\n<ul>\n<li>Opening a file to edit : vim filename.ext</li>\n<li>Editing a file : 'i' key</li>\n<li>Closing a file without saving : 'esc' key &gt; ':' key &gt; type 'q!'</li>\n<li>Closing a file with saving: 'esc' key &gt; ':' key &gt; type 'wq!'</li>\n</ul>","activityList":[]},{"id":"2","name":"Metrics\r","content":"<h2 id=\"metrics\">Metrics</h2>\n<p>In this module, we'll:</p>\n<ul>\n<li>Ingest custom metrics via Metric API</li>\n<li>Dashboard custom metrics</li>\n<li>Create a custom metric event</li>\n</ul>\n<h4 id=\"dynatracemetricapi\">Dynatrace Metric API</h4>\n<ol>\n<li>Create API Token</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Access Tokens</code> via Dynatrace Menu : <code>Managed &gt; Access Tokens</code></p></li>\n  <li><p>Click on Create New Token\n  <img src=\"assets/metric_1.png\" alt=\"metric 1\" /></p></li>\n  <li><p>Set token name <code>Perform 2022</code>\n  <img src=\"assets/metric_1_1.png\" alt=\"metric 1_1\" /></p></li>\n  <li><p>Search for <code>metric</code></p></li>\n  <li><p>Select <code>Ingest Metrics</code> &amp; <code>Read Metrics</code> &amp; <code>Write Metrics</code> API v2\n  <img src=\"assets/metric_2.png\" alt=\"metric 2\" /></p></li>\n  <li><p>Search for <code>logs</code></p></li>\n  <li><p>Select <code>Ingest Logs</code> &amp; <code>Read Logs</code> API v2\n  <img src=\"assets/metric_3.png\" alt=\"metric 3\" /></p></li>\n  <li><p>Click on <code>Generate Token</code></p></li>\n  <li><p>Copy and Save Token to Notepad\n  <img src=\"assets/metric_4.png\" alt=\"metric 4\" /></p></li>\n  </ol>\n</blockquote>\n<ol start=\"2\">\n<li>POST Metric via API</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Environment API v2</code> via Account Icon\n  <img src=\"assets/metric_4.4.png\" alt=\"metric 4.4\" /></p></li>\n  <li><p>Search for <code>Metrics</code> then select <code>POST</code> /metrics/ingest\n  <img src=\"assets/metric_4.5.png\" alt=\"metric 4.5\" /></p></li>\n  <li><p>Copy and Paste API-TOKEN via lock icon and authorize token\n  <img src=\"assets/metric_4.6.png\" alt=\"metric 4.6\" /></p></li>\n  <li><p>Click on <code>Try it out</code></p></li>\n  <li><p>Copy and Paste the metrics below :</p></li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">perform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">45</span>\nperform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">55</span>\nperform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">65</span>\nperform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">73</span>\n</code></pre>\n<blockquote>\n  <ol start=\"6\">\n  <li><p>Click on execute\n  <img src=\"assets/metric_4.7.png\" alt=\"metric 4.7\" /></p></li>\n  <li><p>Validate response</p></li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">&quot;linesOk&quot;</span>: <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-attr\">&quot;linesInvalid&quot;</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">&quot;error&quot;</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">&quot;warnings&quot;</span>: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<blockquote>\n  <ol start=\"8\">\n  <li>Execute the command several more times over a couple minutes</li>\n  </ol>\n</blockquote>\n<ol start=\"3\">\n<li>Validate Metric in Dynatrace</li>\n</ol>\n<blockquote>\n  <ol>\n  <li>Navigate to <code>Metrics</code> via Dynatrace menu : <code>Observe and explore &gt; Metrics</code></li>\n  <li>Search for <code>perform2022</code>\n  <img src=\"assets/metric_5.png\" alt=\"metric 5\" /></li>\n  </ol>\n  <ul>\n  <li>It may take a minute, refresh screen if metric doesn't appear</li>\n  </ul>\n</blockquote>\n<h3 id=\"dashboard\">Dashboard</h3>\n<ol>\n<li>Create a Dashboard</li>\n</ol>\n<blockquote>\n  <ol>\n  <li>Navigate to <code>Dashboards</code> via Dynatrace menu: <code>Observe and explore &gt; Dashboards</code></li>\n  <li>Click on <code>Create Dashboard</code></li>\n  <li>Set name to <code>Perform 2022 Dashboard</code>\n  <img src=\"assets/metric_6.png\" alt=\"metric 6\" /></li>\n  </ol>\n</blockquote>\n<ol start=\"2\">\n<li>Pin Metric to Dashboard</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Explore Data</code> via Dynatrace menu: <code>Observe and explore &gt; Explore Data</code></p></li>\n  <li><p>Search for <code>Perform2022</code></p></li>\n  <li><p>Split by <code>Country</code> &amp; <code>State</code></p></li>\n  <li><p>Click on <code>Run query</code>\n  <img src=\"assets/metric_7.png\" alt=\"metric 7\" /></p></li>\n  <li><p>Click on <code>Pin to Dashboard</code></p></li>\n  <li><p>Find the <code>Perform 2022 Dashboard</code> Dashboard</p></li>\n  <li><p>Set tile to <code>Perform 2022 Metric</code></p></li>\n  <li><p>Click on <code>Pin</code>\n  <img src=\"assets/metric_8.png\" alt=\"metric 8\" /></p></li>\n  </ol>\n</blockquote>\n<ol start=\"3\">\n<li>Review Dashboard</li>\n</ol>\n<blockquote>\n  <ol>\n  <li>Open <code>Perform 2022 Dashboard</code> and review <code>Perform 2022 Metric</code> tile\n  <img src=\"assets/metric_9.png\" alt=\"metric 9\" /></li>\n  </ol>\n</blockquote>\n<h3 id=\"analyzeandalert\">Analyze and Alert</h3>\n<ol>\n<li>Create Custom Metric Event for Alerting</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Custom Events for alerting</code> via Dynatrace menu: <code>Manage &gt; Settings &gt; Anomaly Detection &gt; Custom Events for Alerting</code>\n  <img src=\"assets/metric_10.png\" alt=\"metric 10\" /></p></li>\n  <li><p>Click on <code>Create custom event for alerting</code></p></li>\n  <li><p>Search for <code>Perform2022</code>\n  <img src=\"assets/metric_10.1.png\" alt=\"metric 10.1\" /></p></li>\n  <li><p>Set threshold to <code>30</code></p></li>\n  <li><p>Set threshold time to <code>1</code> one minute in every <code>3</code> minute period\n  <img src=\"assets/metric_11.png\" alt=\"metric 11\" /></p></li>\n  <li><p>Set Event Description Title to <code>Perform2022 Custom Metric Event</code></p></li>\n  <li><p>Set Severity to <code>Error</code></p></li>\n  <li><p>Add the following to message</p></li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">Dynamic Country: {dims:country}\nDynamic State: {dims:<span class=\"hljs-keyword\">state</span>}\n</code></pre>\n<blockquote>\n  <ul>\n  <li>\n  <img src=\"assets/metric_12.png\" alt=\"metric 12\" /></li>\n  </ul>\n</blockquote>\n<ol start=\"2\">\n<li>Generate Problem</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Execute the command we used to ingest the <code>Perform2022.mycool.metric</code> several times over a couple minutes</p></li>\n  <li><p>Navigate to <code>Problems</code> via Dynatrace menu: <code>Observe and explore &gt; Problems</code></p></li>\n  <li><p>A new problem with the title <code>Perform2022 Custom Metric Event</code> will open\n  <img src=\"assets/metric_13.png\" alt=\"metric 13\" /></p></li>\n  <li><p>Click on the problem to open the problem card</p></li>\n  <li><p>Identify the dynamic <code>Country</code> and <code>Sate</code> value\n  <img src=\"assets/metric_14.png\" alt=\"metric 14\" /></p></li>\n  </ol>\n</blockquote>","activityList":[]},{"id":"3","name":"Logs\r","content":"<h2 id=\"logs\">Logs</h2>\n<p>In this module, we'll:</p>\n<ul>\n<li>Ingest logs using Log Ingestion API </li>\n<li>Pin Log Query to dashboard</li>\n<li>Create Log Metric</li>\n<li>Create Log Event  </li>\n</ul>\n<h4 id=\"logingestapi\">Log Ingest API</h4>\n<p>The Log Ingestion API allows for you to push custom logs into Dynatrace. </p>\n<ol>\n<li>Install/Deploy an ActiveGate</li>\n</ol>\n<blockquote>\n  <p>Navigate to the Dynatrace HUB</p>\n  <ul>\n  <li>Using the Dynatrace Menu -&gt; Manage -&gt; HUB</li>\n  <li>Search for and click on <code>ActiveGate</code>\n  <img src=\"assets/log_ag_install.png\" alt=\"log_ag_install\" /></li>\n  </ul>\n</blockquote>\n<p>The kubernetes cluster has already an active gate preinstalled.\nTo be able to interact with the Log ingest API you will ned to first get :</p>\n<ul>\n<li>the public ip of your environment</li>\n<li>the \"technical\" host of the active gate</li>\n</ul>\n<p>To get this information run the following command</p>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-builtin-name\">get</span> ingress -n nondynatrace\n</code></pre>\n<p><img src=\"assets/dtu_lab_guide_logs.png\" alt=\"Activegate ingress\" /></p>\n<ol start=\"2\">\n<li>POST Ingest Logs</li>\n</ol>\n<blockquote>\n  <ul>\n  <li>Replace AG_DOMAIN with valid AG domain</li>\n  <li>Replace SaaS Tenant_ID with valid SaaS tenant ID</li>\n  <li>Replace HOST_ID with valid host id</li>\n  <li>Replace PG_ID with valid process group id</li>\n  <li>Replace ADDRESS with valid adress of you eks cluster</li>\n  <li>Replace APITOKEN with the value of you API TOKEN</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\">curl -X POST -H &quot;Host: activegate.domain.com&quot; &quot;https://&lt;ADDRESS&gt;:9999/e/&lt;SaaS_Tenant_ID&gt;/api/v2/logs/ingest&quot; -H &quot;accept: application/json; charset=utf-8&quot; -H &quot;Authorization: Api-Token &lt;APITOKEN&gt;&quot; -H &quot;Content-Type: application/json; charset=utf-8&quot; -d &quot;[{\\&quot;content\\&quot;:\\&quot;example <span class=\"hljs-keyword\">log</span> content <span class=\"hljs-number\">1</span>\\&quot;,\\&quot;status\\&quot;:\\&quot;error\\&quot;,\\&quot;<span class=\"hljs-keyword\">log</span>.source\\&quot;:\\&quot;/var/<span class=\"hljs-keyword\">log</span>/syslog\\&quot;,\\&quot;dt.entity.host\\&quot;:\\&quot;&lt;HOST ID&gt;\\&quot;,\\&quot;dt.entity.process_group_instance\\&quot;:\\&quot;&lt;PG_ID&gt;\\&quot;},{\\&quot;content\\&quot;:\\&quot;example <span class=\"hljs-keyword\">log</span> content <span class=\"hljs-number\">2</span>\\&quot;,\\&quot;status\\&quot;:\\&quot;<span class=\"hljs-keyword\">info</span>\\&quot;,\\&quot;<span class=\"hljs-keyword\">log</span>.source\\&quot;:\\&quot;/var/<span class=\"hljs-keyword\">log</span>/syslog\\&quot;,\\&quot;dt.entity.host\\&quot;:\\&quot;&lt;HOST ID&gt;\\&quot;,\\&quot;dt.entity.process_group_instance\\&quot;:\\&quot;&lt;PG_ID&gt;\\&quot;}]&quot;\n</code></pre>\n<blockquote>\n  <ul>\n  <li>Example LOG JSON</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\">[\n    {\n    <span class=\"hljs-attr\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;example log content 1&quot;</span>,\n    <span class=\"hljs-attr\">&quot;status&quot;</span> : <span class=\"hljs-string\">&quot;error&quot;</span>,\n    <span class=\"hljs-attr\">&quot;log.source&quot;</span>: <span class=\"hljs-string\">&quot;/var/log/syslog&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.host&quot;</span> : <span class=\"hljs-string\">&quot;&lt;HOST ID&gt;&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.process_group_instance&quot;</span>: <span class=\"hljs-string\">&quot;&lt;PG_ID&gt;&quot;</span>\n    <span class=\"hljs-string\">&quot;response&quot;</span>:<span class=\"hljs-number\">12</span>\n  },\n  {\n    <span class=\"hljs-attr\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;example log content 2&quot;</span>,\n    <span class=\"hljs-attr\">&quot;status&quot;</span> : <span class=\"hljs-string\">&quot;info&quot;</span>,\n    <span class=\"hljs-attr\">&quot;log.source&quot;</span>: <span class=\"hljs-string\">&quot;/var/log/syslog&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.host&quot;</span> : <span class=\"hljs-string\">&quot;&lt;HOST ID&gt;&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.process_group_instance&quot;</span>: <span class=\"hljs-string\">&quot;&lt;PG_ID&gt;&quot;</span>,\n     <span class=\"hljs-attr\">&quot;response&quot;</span>:<span class=\"hljs-number\">1</span>\n  }\n]\n</code></pre>\n<h3 id=\"createametricoutofalogs\">Create a metric out of a logs</h3>\n<h3 id=\"analyzeandalert\">Analyze and Alert</h3>","activityList":[]},{"id":"4","name":"Integrating Dynatrace With Prometheus\r","content":"<h2 id=\"integratingdynatracewithprometheus\">Integrating Dynatrace With Prometheus</h2>\n<p>In this module we'll learn how to integrate Dynatrace with Prometheus in Kubernetes.</p>\n<ul>\n<li>Setup Node Exporter for Metric Ingest</li>\n<li>Setup ActiveGate to scrape Prometheus Metrics</li>\n<li>Setup Kube-state Metric Exporter for Metric Ingest</li>\n<li>Setup Nginx Exporter for Metric Ingest</li>\n<li>Visualize Metric in Dynatrace</li>\n</ul>\n<h3 id=\"setupprometheusexporterformetricingest\">Setup Prometheus Exporter For Metric Ingest</h3>\n<p>Let's explore how the promethues-node-exporter is exposing metrics.\nThere are some things we need to gather from the exporter:</p>\n<ul>\n<li>Port</li>\n<li>Metric Url Endpoint</li>\n</ul>\n<h4 id=\"step1identifyingportnodeexporter\">Step 1: Identifying Port - Node Exporter</h4>\n<p>Let's identify the port exposed by the Node Exporter. \nThe node exporter is deployed as a Daemonset by the Prometheus Operator.</p>\n<blockquote>\n  <ol>\n  <li>Run the kubectl command:</li>\n  </ol>\n  <ul>\n  <li>This will get all the daemonsets in the default namespace.</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-builtin-name\">get</span> ds\n</code></pre>\n<p><img src=\"assets/prom_1.png\" alt=\"Prometheus_1\" /></p>\n<blockquote>\n  <ol start=\"2\">\n  <li>Copy and replace the name of the Node Exporter DS and run the kubectl command:</li>\n  </ol>\n  <ul>\n  <li>This will get the container port for the Prometheus-node-exporter daemonset.</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\">kubectl get ds {DS NAME} -o jsonpath=&#x27;{<span class=\"hljs-string\">.spec.template.spec.containers</span>[0]<span class=\"hljs-string\">.ports</span>[]<span class=\"hljs-string\">.containerPort</span>}{<span class=\"hljs-string\">&quot;\\n&quot;</span>}&#x27;\n</code></pre>\n<p><img src=\"assets/prom_2.png\" alt=\"Prometheus_2\" /></p>\n<h4 id=\"step2validatetheprometheusmetricsbyexposingexporterporttolocalhost\">Step 2: Validate the prometheus metrics by exposing exporter port to localhost.</h4>\n<blockquote>\n  <ol>\n  <li>Run the kubectl command:</li>\n  </ol>\n  <ul>\n  <li>This will get all pods in the default namespace.</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\">Kubectl <span class=\"hljs-builtin-name\">get</span> pod\n</code></pre>\n<p><img src=\"assets/prom_4.png\" alt=\"Prometheus_4\" /></p>\n<blockquote>\n  <ol start=\"2\">\n  <li>Copy the name of one of the prometheus-node-exporter pods, replace the {POD NAME} and {PORT} with the port identified above and run the command:</li>\n  </ol>\n  <ul>\n  <li>This will expose the port to the host to be accessible on localhost.</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\"><span class=\"xml\">    kubectl </span><span class=\"hljs-template-variable\">{POD NAME}</span><span class=\"xml\"> </span><span class=\"hljs-template-variable\">{PORT}</span><span class=\"xml\">:</span><span class=\"hljs-template-variable\">{PORT}</span><span class=\"xml\">\n</span></code></pre>\n<p><img src=\"assets/prom_4.1.png\" alt=\"Prometheus_4.1\" /></p>\n<h4 id=\"step3testandidentifyingprometheusmetricurlendpoint\">Step 3: Test and identifying prometheus metric url endpoint</h4>\n<p>The Metric Url is typically /metrics. In our case it is /metrics.</p>\n<blockquote>\n  <ol>\n  <li>Duplicate the 'https://university.dynatrace.com/' tab, this should open another instance of the virtural classroom. Then terminal into the Bastion Host. Run the following curl command:</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">curl http:<span class=\"hljs-regexp\">//</span>localhost:PORT/metrics\n</code></pre>\n<p><img src=\"assets/prom_3.png\" alt=\"Prometheus_3\" /></p>\n<ul>\n<li>The result should be a large output of available node exporter metrics:\n<img src=\"assets/prom_3.3.png\" alt=\"Prometheus_3.3\" /></li>\n</ul>\n<h3 id=\"setupactivegatetoscrapeprometheusnodeexportermetrics\">Setup ActiveGate to scrape Prometheus-node-exporter Metrics</h3>\n<p>To be able to let the Active Gate scrape the prometheus metric from the node exporter, we need to :</p>\n<ul>\n<li>define the Dynatrace Annotations </li>\n<li>create a Service attach to the node exporters</li>\n</ul>\n<blockquote>\n  <ol>\n  <li>Use <code>vim</code> to edit the following file - <code>hotday_script/prometheus/serice_nodexporter_template.yaml</code>:</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">vim hotday_script<span class=\"hljs-regexp\">/prometheus/</span>serice_nodexporter_template.yaml\n</code></pre>\n<blockquote>\n  <ol start=\"2\">\n  <li>Update the annotation section replacing the value of 'metric.dynatrace.com/port' annotation with the correct port, current value is TO_DEFINE.</li>\n  </ol>\n</blockquote>\n<ul>\n<li>Before</li>\n</ul>\n<pre><code class=\"hljs\">metadat<span class=\"hljs-variable\">a:</span>\n  annotation<span class=\"hljs-variable\">s:</span>\n    metrics.dynatrace.<span class=\"hljs-keyword\">com</span>/path: <span class=\"hljs-string\">&quot;/metrics&quot;</span>\n    metrics.dynatrace.<span class=\"hljs-keyword\">com</span>/por<span class=\"hljs-variable\">t:</span> <span class=\"hljs-string\">&quot;TO_DEFINE&quot;</span>\n    metrics.dynatrace.<span class=\"hljs-keyword\">com</span>/scrape: <span class=\"hljs-string\">&quot;true&quot;</span>\n</code></pre>\n<ul>\n<li>After (replace TO_DEFINE with port idetnified)</li>\n</ul>\n<pre><code class=\"hljs\">metadat<span class=\"hljs-variable\">a:</span>\n  annotation<span class=\"hljs-variable\">s:</span>\n    metrics.dynatrace.<span class=\"hljs-keyword\">com</span>/path: <span class=\"hljs-string\">&quot;/metrics&quot;</span>\n    metrics.dynatrace.<span class=\"hljs-keyword\">com</span>/por<span class=\"hljs-variable\">t:</span> <span class=\"hljs-string\">&quot;9100&quot;</span>\n    metrics.dynatrace.<span class=\"hljs-keyword\">com</span>/scrape: <span class=\"hljs-string\">&quot;true&quot;</span>\n</code></pre>\n<blockquote>\n  <ol start=\"3\">\n  <li>Deploy the new Service :</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">kubectl apply -f Hotday_Script<span class=\"hljs-regexp\">/prometheus/</span>serice_nodexporter_template.yaml\n</code></pre>\n<h3 id=\"setupkubestatemetricexporterformetricingest\">Setup Kube-state Metric Exporter for Metric Ingest</h3>\n<p>Similar steps to 'Setup Node Exporter for Metric Ingest'</p>\n<blockquote>\n  <ol>\n  <li>Run the describe kubectl command to identify port: </li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">kubectl get deployment prometheus-kube-state-metrics -o jsonpath=&#x27;{<span class=\"hljs-string\">.spec.template.spec.containers</span>[0]<span class=\"hljs-string\">.ports</span>[]<span class=\"hljs-string\">.containerPort</span>}{<span class=\"hljs-string\">&quot;\\n&quot;</span>}&#x27;\n</code></pre>\n<blockquote>\n  <ol start=\"2\">\n  <li>Use vim to update the <code>hotday_script/prometheus/service_template.yaml</code> file with the correct port</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">vim hotday_script<span class=\"hljs-regexp\">/prometheus/</span>service_template.yaml\n\nreplace TO_DEFINE with port identified <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>.\n</code></pre>\n<blockquote>\n  <ol start=\"3\">\n  <li>Deploy the new Service :</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">kubectl apply -f Hotday_Script<span class=\"hljs-regexp\">/prometheus/</span>service_template.yaml\n</code></pre>\n<h3 id=\"setupnginxexporterformetricingest\">Setup Nginx Exporter for Metric Ingest</h3>\n<p>Similar to above, we want to ingest metrics from the nginx ingress controller.\nIn the default namespace, nginx ingress controller has been deployed.</p>\n<blockquote>\n  <ol>\n  <li>Run the describe kubectl command to identify port: </li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">kubectl get deployment nginx-nginx-ingress -o jsonpath=&#x27;{<span class=\"hljs-string\">.spec.template.spec.containers</span>[0]<span class=\"hljs-string\">.ports</span>[]<span class=\"hljs-string\">.containerPort</span>}{<span class=\"hljs-string\">&quot;\\n&quot;</span>}&#x27;\n</code></pre>\n<blockquote>\n  <ol start=\"2\">\n  <li>Use vim to update the <code>hotday_script/prometheus/service__nginx_template.yaml</code> file with the correct port</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">vim hotday_script<span class=\"hljs-regexp\">/prometheus/</span>service__nginx_template.yaml\n\nreplace TO_DEFINE with port identified <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>.\n</code></pre>\n<blockquote>\n  <ol start=\"3\">\n  <li>Deploy the new Service :</li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">kubectl apply -f hotday_script<span class=\"hljs-regexp\">/prometheus/</span>service__nginx_template.yaml\n</code></pre>\n<h3 id=\"visualizemetricindynatrace\">Visualize Metric in Dynatrace</h3>\n<h4 id=\"metrics\">Metrics</h4>\n<p>All the ingested metrics can be found in \"Metrics\".\nOpen <code>Metrics</code>, and search for <code>kube_pod</code>\n<img src=\"assets/prom_metrics_screen.png\" alt=\"Metrics_Prometheus_metrics\" /></p>\n<p>By expending , the desired metric you can see all the available dimensions.</p>\n<h4 id=\"dataexplorer\">Data explorer</h4>\n<h5 id=\"kubeproxy\">Kube proxy</h5>\n<p>Let's create a pie chart showing the ditribution of the pod Phases.\nIn tha Data explorer search for <code>kube_pod_status_phase</code>.\n<img src=\"assets/dtu_prom_pod_phase.png\" alt=\"Metrics_Prometheus_Pod phase\" /></p>\n<p>Create a pie chart splitting the value by the dimension <code>phase</code></p>\n<h5 id=\"nginxingresscontroller\">Nginx ingress controller</h5>\n<p>The current environment use a Nginx Ingress controller to expose the following services out of the cluster:</p>\n<ul>\n<li>the active gate ( to be able to utilize the api) though the service <code>fluentd-activegate</code> located in the namespace <code>nondynatrace</code></li>\n<li>the hipster-shop through the service <code>frontend</code> located in the namespace <code>hipster-shop</code></li>\n</ul>\n<p>To understand the health of our ingress, it would be useful to be able to split any of the statistics by :</p>\n<ul>\n<li>the service name</li>\n<li>the name of the ingress</li>\n<li>the namespace of the ingress</li>\n</ul>\n<p>Let's create a graph showing the <code>http_request_total</code></p>\n<p>In the Data explorer search for <code>nginx_ingress_nginx_http_requests_total.count</code>\n<img src=\"assets/dtu_prom_nginx_http.png\" alt=\"Metrics_Ingress_controller\" /></p>\n<p>Do you have the right dimension to split the statistic by service name?</p>","activityList":[]},{"id":"5","name":"Logs: Integrating Fluentd and Dynatrace\r","content":"<h2 id=\"logsintegratingfluentdanddynatrace\">Logs: Integrating Fluentd and Dynatrace</h2>\n<p>In this module, we'll discover how Dynatrace integrates logs events fluentd in Kubernetes. As well as, we'll learn how to leverage these log events in Dynatrace by creating log metrics, log alerts and charting.</p>\n<h3 id=\"whatsinitforme\">What's in it for Me?</h3>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale. </p>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>Access to the <em>Bastion host</em></li>\n<li>Access to the acl-docs repository</li>\n</ul>","activityList":[{"id":"5.1","name":"Working with Fluentd\r","content":"<h2 id=\"workingwithfluentd\">Working with Fluentd</h2>\n<p>In this module we'll learn about Fluentd and how to do the following:</p>\n<h3 id=\"whatisfluentd\">What is Fluentd?</h3>\n<p>An open-source log collector to unify logging layer.</p>\n<p>Key Features:</p>\n<ul>\n<li>Stores and structures data in JSON</li>\n<li>Pluggable Architecture allows for easily extending functionality</li>\n<li>Built-in Reliability</li>\n</ul>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale. </p>\n<h4 id=\"objective\">Objective</h4>\n<p>The metric exposed by Nginx ingress controller is not providing the right dimensions to understand precisely how the traffic is splitted between the several services of our cluster.\nLet's utilize logs to expose the right dimensions.</p>\n<h3 id=\"adjusttheloggingformatofnginx\">Adjust the logging format of Nginx</h3>\n<p>Nginx produce a standard logging format :\n<code>\n127.0.0.1 - - [10/Oct/2020:15:10:20 -0600] \"HEAD / HTTP/1.1\" 200 0 \"&lt;https://example.com&gt;\" \"Mozilla/5.0...\"\n</code>\nThe logging format of nginx is structure with the help of nginx variables :\n<code>\n$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\"\n</code>\nTHe logging format of Nginx could be adjusted by modifying the nginx configuration file.\nIn kubernetes the configuration file is stored in a Config Map.\nIn our cluster the nginx config map is called: <code>nginx-config</code></p>\n<p>To add extra information in the nginx log files add structure the logs by adding extra metadata :</p>\n<ul>\n<li>service name</li>\n<li>namespace of the ingress</li>\n<li>name of the ingress</li>\n<li>response time</li>\n<li>proxy host</li>\n<li>…etc</li>\n</ul>\n<p>IN the cluster the Nginx has already been configured to produce the logs with our extra metadata :</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">log</span>-<span class=\"hljs-keyword\">format</span>:\n----\n$remote_addr [$time_local] $request $status $body_bytes_sent $request_time $upstream_addr $upstream_response_time $proxy_host  $upstream_status $resource_name $resource_type $resource_namespace $service\n</code></pre>\n<p>To validate the configuration let's describe the config map </p>\n<h3 id=\"createalogstreampipelineextractingthemetadata\">Create a log stream pipeline extracting the metadata</h3>\n<h4 id=\"collectlogsfromnginx\">Collect logs from nginx</h4>\n<p>To collect logs from files, fluentd has an input plugin <code>tail</code>\nBecause dynatrace is already ingesting logs in our cluster ( except for the namespace nondynatrace), let's collect logs only from the nginx pods:</p>\n<pre><code class=\"hljs\">&lt;source&gt;\n    <span class=\"hljs-title\">@type</span> <span class=\"hljs-keyword\">tail</span>\n    path /var/log/containers/*nginx*.log\n    pos_file /var/log/fluentd.pos\n    time_format <span class=\"hljs-variable\">%Y-</span><span class=\"hljs-variable\">%m-</span><span class=\"hljs-variable\">%dT</span><span class=\"hljs-variable\">%H</span>:<span class=\"hljs-variable\">%M</span>:<span class=\"hljs-variable\">%S.</span><span class=\"hljs-variable\">%NZ</span>\n    tag nginx\n&lt;/source&gt;\n</code></pre>\n<p>path /var/log/containers/<em>nginx</em>.log will only collect logs from containers having nginx in the pod name</p>\n<pre><code class=\"hljs\">&lt;source&gt;\n    <span class=\"hljs-title\">@type</span> <span class=\"hljs-keyword\">tail</span>\n    path /var/log/containers/*nginx*.log\n    pos_file /var/log/fluentd.pos\n    time_format <span class=\"hljs-variable\">%Y-</span><span class=\"hljs-variable\">%m-</span><span class=\"hljs-variable\">%dT</span><span class=\"hljs-variable\">%H</span>:<span class=\"hljs-variable\">%M</span>:<span class=\"hljs-variable\">%S.</span><span class=\"hljs-variable\">%NZ</span>\n    tag nginx\n&lt;/source&gt;\n&lt;match nginx&gt;\n <span class=\"hljs-title\">@type</span> stdout\n&lt;/match&gt;\n</code></pre>\n<p>To visualize the collected logs you can use the fluentd output plugin <code>Stdout</code> that will expose the transormed logs in the fluentd container log.</p>\n<h4 id=\"parsethenginxlogs\">Parse the nginx logs</h4>\n<p>Once the logs collected, we want to extract the metadata to create new fluentd \"keys\"\nFluentd has parser plugins that will help us to extract the data.\nThe parser plugin that we will use is <code>nginx</code>\nthe Nginx parser plugin is able to automatically extract the metadata of the standard logging format.</p>\n<p>Because of the customized logging format we will need to use <code>expression</code> to explain how to parse our logging format.</p>\n<pre><code class=\"hljs\">&lt;parse&gt;\n    @type nginx\n    key_name log\n    reserve_data yes\n    expression  /^(?&lt;logtime&gt;<span class=\"hljs-symbol\">\\S</span>+)<span class=\"hljs-symbol\">\\s</span>+(?&lt;logtype&gt;<span class=\"hljs-symbol\">\\S</span>+)<span class=\"hljs-symbol\">\\s</span>+(?&lt;type&gt;<span class=\"hljs-symbol\">\\w</span>+)<span class=\"hljs-symbol\">\\s</span>+(?&lt;ip&gt;<span class=\"hljs-symbol\">\\S</span>+)<span class=\"hljs-symbol\">\\s</span>+<span class=\"hljs-symbol\">\\[</span>(?&lt;time_local&gt;[^<span class=\"hljs-symbol\">\\]</span>]*)<span class=\"hljs-symbol\">\\]</span><span class=\"hljs-symbol\">\\s</span>+(?&lt;method&gt;<span class=\"hljs-symbol\">\\S</span>+)<span class=\"hljs-symbol\">\\s</span>+(?&lt;request&gt;<span class=\"hljs-symbol\">\\S</span>+)<span class=\"hljs-symbol\">\\s</span>+(?&lt;httpversion&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;status&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;bytes_sent&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;responsetime&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;proxy&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;upstream_responsetime&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;ressourcename&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;upstream_status&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;ingress_name&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;ressource_type&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;ressource_namesapce&gt;<span class=\"hljs-symbol\">\\S</span>*)<span class=\"hljs-symbol\">\\s</span>+(?&lt;service&gt;<span class=\"hljs-symbol\">\\w</span>*)/\n    time_format <span class=\"hljs-variable\">%d/%</span>b/<span class=\"hljs-variable\">%Y:%</span>H:<span class=\"hljs-variable\">%M:%</span>S <span class=\"hljs-variable\">%z\n&lt;/parse&gt;\n</span></code></pre>\n<p>To be able to extract log from the tail plugin, we need to add the parser within the input plugin <code>tail</code></p>\n<pre><code class=\"hljs\">&lt;source&gt;\n    @<span class=\"hljs-keyword\">type</span> tail\n    path /var/log/containers/*nginx*.log\n    pos_file /var/log/fluentd.pos\n    time_format %<span class=\"hljs-type\">Y</span>-%m-%dT%<span class=\"hljs-type\">H</span>:%<span class=\"hljs-type\">M</span>:%<span class=\"hljs-type\">S</span>.%<span class=\"hljs-type\">NZ</span>\n    tag nginx\n    &lt;parse&gt;\n        @<span class=\"hljs-keyword\">type</span> nginx\n        key_name log\n        reserve_data yes\n        expression  /^(?&lt;logtime&gt;\\<span class=\"hljs-type\">S</span>+)\\s+(?&lt;log<span class=\"hljs-keyword\">type</span>&gt;\\<span class=\"hljs-type\">S</span>+)\\s+(?&lt;type&gt;\\w+)\\s+(?&lt;ip&gt;\\<span class=\"hljs-type\">S</span>+)\\s+\\[(?&lt;time_local&gt;[^\\]]*)\\]\\s+(?&lt;method&gt;\\<span class=\"hljs-type\">S</span>+)\\s+(?&lt;request&gt;\\<span class=\"hljs-type\">S</span>+)\\s+(?&lt;httpversion&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;status&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;bytes_sent&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;responsetime&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;proxy&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;upstream_responsetime&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;ressourcename&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;upstream_status&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;ingress_name&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;ressource_type&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;ressource_namesapce&gt;\\<span class=\"hljs-type\">S</span>*)\\s+(?&lt;service&gt;\\w*)/\n    &lt;/parse&gt;\n    read_from_head true\n    keep_time_key true\n&lt;/source&gt;\n</code></pre>\n<p>To Generate metrics out of the extracted metadata, we need to define the type of each new Fluentd keys.</p>\n<p>the operator <code>types</code> allow us to define for each key the type .\nfor example :</p>\n<pre><code class=\"hljs\">types keyname1:<span class=\"hljs-keyword\">type</span>,keyname2:<span class=\"hljs-keyword\">type</span>..\n</code></pre>\n<p>The fluentd Data type :</p>\n<ul>\n<li>string</li>\n<li>integer</li>\n<li>float</li>\n<li>time</li>\n<li>size </li>\n<li>bool</li>\n<li>….</li>\n</ul>\n<p>From the current log stream pipeline add the <code>types</code> operator to define types to the various keys</p>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-built_in\">get</span> <span class=\"hljs-keyword\">cm</span> -n nondynatrace\nkubectl <span class=\"hljs-keyword\">edit</span> <span class=\"hljs-keyword\">cm</span> fluentd-<span class=\"hljs-keyword\">conf</span>\n</code></pre>\n<p>To utilize our new log stream pipeline we need to delete the fluentd pods</p>\n<pre><code class=\"hljs\">kubectl delete pods -n dynatrace -l <span class=\"hljs-attribute\">app</span>=fluentd-pipeline\n</code></pre>\n<p>We need to look at the produced logs of our log stream pipeline on the pod collecting the logs of the Nginx ingress\nWe need to select the fluentd pod running to the same node as Nginx ingress controller\nThe following command will list all pods and precise which node is hosting the pod :</p>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-keyword\">get</span> pod -o=custom-<span class=\"hljs-keyword\">columns</span>=NODE:.spec.nodeName,<span class=\"hljs-type\">NAME</span>:.metadata.name <span class=\"hljs-comment\">--all-namespaces</span>\n</code></pre>\n<p>Once you have the fluentd pod name you can then show the generated logs of this pod with :</p>\n<pre><code class=\"hljs\">kubectl logs <span class=\"hljs-variable\">$FLUENTID_PODNAME</span> <span class=\"hljs-literal\">-n</span> nondynatrace <span class=\"hljs-operator\">-f</span>\n</code></pre>\n<p>To see new logs coming in Fluentd , we need to generate traffic,</p>\n<pre><code class=\"hljs\"><span class=\"hljs-regexp\">/hotday_script/</span>load/generateTraffic.sh\n</code></pre>\n<h4 id=\"collecttherequesttimeasthelogstreamtime\">Collect the request time as the logstream time</h4>\n<p>fluentd parser plugin can also precise which key contains the date with <code>time_key</code>\nLet's modify our current fluentd pipeline by adding after the <code>types</code> operator : </p>\n<pre><code class=\"hljs\">time_key time_local\ntime_format <span class=\"hljs-built_in\">%d</span>/<span class=\"hljs-built_in\">%b</span>/<span class=\"hljs-built_in\">%Y</span>:<span class=\"hljs-built_in\">%H</span>:<span class=\"hljs-built_in\">%M</span>:<span class=\"hljs-built_in\">%S</span> <span class=\"hljs-built_in\">%z</span>\n</code></pre>\n<h4 id=\"defineaprometheusoutputplugin\">Define a Prometheus output plugin</h4>\n<p>Fluentd has a Prometheus plugin that is able to :</p>\n<ul>\n<li>create a prometheus exporter on the fluentd agent</li>\n<li>expose statistics related to the log stream pipeline</li>\n<li>expose custom metrics</li>\n</ul>\n<p>To define the exporter we need to use another <code>source</code> :</p>\n<pre><code class=\"hljs\">&lt;<span class=\"hljs-built_in\">source</span>&gt;\n @<span class=\"hljs-built_in\">type</span> prometheus\n <span class=\"hljs-built_in\">bind</span> 0.0.0.0\n port 9914\n metrics_path /metrics\n&lt;/<span class=\"hljs-built_in\">source</span>&gt;\n</code></pre>\n<h4 id=\"exposemetricsextractedfromournginxlogs\">Expose metrics extracted from our Nginx logs</h4>\n<p>To expose metrics we need to define the metric using <code>metric</code>\nA metric requires several properties :</p>\n<ul>\n<li>name</li>\n<li>description</li>\n<li>type : counter, gauge, histogram, summary</li>\n<li>the key ( optional)\nfor example :</li>\n</ul>\n<pre><code class=\"hljs\">&lt;metric&gt;\n    <span class=\"hljs-type\">name</span> byte_sent\n    <span class=\"hljs-keyword\">type</span> gauge\n    <span class=\"hljs-keyword\">desc</span> byte sent\n    key bytes_sent\n&lt;/metric&gt;\n</code></pre>\n<p>Exposing metric is good, but we need to right dimensions to be able to visualize properly our traffic  splitted by services, ingress…etc\nThe prometheus plugins has the option to create labels for our metric.\nWe can either define the label :</p>\n<ul>\n<li>inside the metric object : for a specific label related to that metric</li>\n<li>outside the metric object :  for common labels for all the metric defined in our pipeline\nexample:</li>\n</ul>\n<pre><code class=\"hljs\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span>  <span class=\"hljs-attr\">nginx</span>&gt;</span>\n @type prometheus\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">labels</span>&gt;</span>\n   method $</span><span class=\"hljs-template-variable\">{method}</span><span class=\"xml\">\n   request $</span><span class=\"hljs-template-variable\">{request}</span><span class=\"xml\">\n   status $</span><span class=\"hljs-template-variable\">{status}</span><span class=\"xml\">\n   namespace $</span><span class=\"hljs-template-variable\">{ressource_namesapce}</span><span class=\"xml\">\n   service $</span><span class=\"hljs-template-variable\">{service}</span><span class=\"xml\">\n   ressourcename $</span><span class=\"hljs-template-variable\">{ressourcename}</span><span class=\"xml\">\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">labels</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">metric</span>&gt;</span>\n   name hotday_response_time\n   type gauge\n   desc responset time\n   key responsetime\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">metric</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span>\n</span></code></pre>\n<p>Now let's update our fluentd pipeline by exposing :</p>\n<ul>\n<li>response time</li>\n<li>byte sent</li>\n<li>count the logs stream ( number of request/s)</li>\n</ul>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-keyword\">edit</span> <span class=\"hljs-keyword\">cm</span> fluentd-<span class=\"hljs-keyword\">conf</span>\n</code></pre>\n<p>To test your update don't forget to :</p>\n<ul>\n<li>delete the fluentd pods</li>\n<li>display the logs of the fluentd ingeting the logs of the nginx ingress controller</li>\n<li>generate some http traffic</li>\n</ul>\n<h3 id=\"createaservicewithdynatraceprometheusannotationtoingestthegeneratedmetrics\">Create a service with dynatrace Prometheus annotation to ingest the generated metrics</h3>\n<p>Similar to the previous exercice related to Prometheus metrics.\nUpdate the following file by updating the port of the fluentd exporter :\n<code>/home/$BASTION_USER/hotday_script/prometheusservice_fluentd_metric.yaml</code></p>\n<p>once modified create the new service with the following command :</p>\n<pre><code class=\"hljs\">kubectl apply -f <span class=\"hljs-regexp\">/home/</span><span class=\"hljs-variable\">$BASTION_USER</span><span class=\"hljs-regexp\">/hotday_script/</span>prometheusservice_fluentd_metric.yaml -n nondynatrace\n</code></pre>\n<h3 id=\"createagraphutilizingthenewnginxmetrics\">Create a graph utilizing the new nginx metrics</h3>\n<h4 id=\"generatetraffic\">generate traffic</h4>\n<p>To be able to ingest metrics we need to generate traffic in the background.\nUse the script :</p>\n<pre><code class=\"hljs\"><span class=\"hljs-regexp\">/hotday_script/</span>load/generateTraffic.sh\n</code></pre>\n<h4 id=\"createagraphshowingthe90thpercentileoftheresponsetimesplittedbyservice\">Create a Graph showing the 90th percentile of the response time splitted by service</h4>\n<p>Go to the Data Explorer and search for the new metric: <code>hotday_response_time</code></p>\n<p>Create a graph with :</p>\n<ul>\n<li>aggregator : Percentile 90th</li>\n<li>Split by : service</li>\n</ul>\n<p><img src=\"assets/dt_fluentd_metrics.png\" alt=\"Response time graph\" /></p>\n<h4 id=\"createapieraphshowingthestatuscodeperservices\">Create a Pie raph showing the status code per services</h4>\n<p>Go to the Data Explorer and search for the new metric: <code>hotday_requests</code></p>\n<p>Create a graph with :</p>\n<ul>\n<li>aggregator : Count</li>\n<li>Split by : status,service</li>\n</ul>\n<p><img src=\"assets/dtu_fluentd_metrics_status.png\" alt=\"Pie chart\" /></p>","activityList":[]},{"id":"5.2","name":"Logs: Integrating Fluentd and Dynatrace\r","content":"<h2 id=\"logsintegratingfluentdanddynatrace\">Logs: Integrating Fluentd and Dynatrace</h2>\n<p>In this module we'll learn how to integrate Dynatrace with Fluentd in Kubernetes.</p>\n<h3 id=\"whatsinitforme\">What's in it for Me?</h3>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale. </p>\n<p>We will update our previous log stream pipeline to forward the generated log to dynatrace</p>\n<h3 id=\"objective\">Objective</h3>\n<p>This exercise will :</p>\n<ul>\n<li>modify our current fluentd pipeline</li>\n<li>utilize the log v2 viewer</li>\n<li>create a dynatrace metric out of logs</li>\n</ul>\n<h3 id=\"1letsupdatethelogstreambyrestructuringthelogstream\">1. Let's update the log stream by restructuring the log stream</h3>\n<p>Fluentd has a output plugin dynatrace that will forward the generated log to the logs ingest API.\nThe log ingest API requires a specific format :</p>\n<pre><code class=\"hljs\">{\n<span class=\"hljs-attr\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;example log content 1&quot;</span>,\n<span class=\"hljs-attr\">&quot;status&quot;</span> : <span class=\"hljs-string\">&quot;error&quot;</span>,\n<span class=\"hljs-attr\">&quot;log.source&quot;</span>: <span class=\"hljs-string\">&quot;/var/log/syslog&quot;</span>,\n<span class=\"hljs-attr\">&quot;dt.entity.host&quot;</span> : <span class=\"hljs-string\">&quot;&lt;HOST ID&gt;&quot;</span>,\n<span class=\"hljs-attr\">&quot;dt.entity.process_group_instance&quot;</span>: <span class=\"hljs-string\">&quot;&lt;PG_ID&gt;&quot;</span>\n<span class=\"hljs-string\">&quot;response&quot;</span>:<span class=\"hljs-number\">12</span>\n}\n</code></pre>\n<ul>\n<li>The property content will have the value of our log.</li>\n<li>status is optionnal but helps to filter our content</li>\n<li>log.source is also optional\nWe can add as many extra properties to attach extra labels related to our log stream.\nSeveral labels will be used to index the log stream to a given Dynatrace entity.</li>\n</ul>\n<h4 id=\"howtorestructureourlogs\">how to restructure our logs</h4>\n<p>Fluentd has a plugin that will helps us to restructure the produced log stream : <code>record_transformer</code></p>\n<pre><code class=\"hljs\">@<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">record_transformer\n</span>enable_ruby <span class=\"hljs-literal\">true</span>\n&lt;<span class=\"hljs-keyword\">record</span>&gt;\ncontent ${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;method&quot;</span>]} ${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;request&quot;</span>]} ${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;status&quot;</span>]} ${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;service&quot;</span>]} ${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;bytes_sent&quot;</span>]} ${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;responsetime&quot;</span>]} ${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;service&quot;</span>]}\n&lt;/<span class=\"hljs-keyword\">record</span>&gt;\n</code></pre>\n<p><record></record> will help us to re structure our log stream before sending it to dynatrace.</p>\n<p>In the record object you can add as many new labels</p>\n<pre><code class=\"hljs\">&lt;<span class=\"hljs-keyword\">record</span>&gt;\nlabelname value\n&lt;/<span class=\"hljs-keyword\">record</span>&gt;\n</code></pre>\n<p>record can retrieve the value of existing fluentd keys with :</p>\n<pre><code class=\"hljs\">${<span class=\"hljs-keyword\">record</span>[<span class=\"hljs-string\">&quot;keyname&quot;</span>]}\n</code></pre>\n<p>To fully index a log stream to a Pod, node, k8s cluster it is required to add the following labels :</p>\n<ul>\n<li><code>dt.kubernetes.node.name</code></li>\n<li><code>dt.kubernetes.node.system_uuid</code> </li>\n<li><code>k8s.pod.labels</code></li>\n<li><code>dt.kubernetes.cluster.id</code> </li>\n<li><code>k8s.namespace.uid</code></li>\n<li><code>k8s.namespace.name</code></li>\n<li><code>k8s.pod.name</code> </li>\n<li><code>k8s.pod.uid</code> </li>\n</ul>\n<p>if you log stream does not have the details limit to the available information\nyou can easily retrieve the to fields with :</p>\n<pre><code class=\"hljs\"><span class=\"hljs-selector-tag\">dt</span><span class=\"hljs-selector-class\">.kubernetes</span><span class=\"hljs-selector-class\">.cluster</span><span class=\"hljs-selector-class\">.id</span> <span class=\"hljs-string\">&quot;#{ENV[&#x27;CLUSTER_ID&#x27;]}&quot;</span>\n<span class=\"hljs-selector-tag\">dt</span><span class=\"hljs-selector-class\">.kubernetes</span><span class=\"hljs-selector-class\">.node</span><span class=\"hljs-selector-class\">.system_uuid</span> ${File<span class=\"hljs-selector-class\">.read</span>(<span class=\"hljs-string\">&quot;/sys/devices/virtual/dmi/id/product_uuid&quot;</span>).strip}\n</code></pre>\n<h4 id=\"removelogstreamsthatarenotrelatedtohttptrafficgoingthroughtheingress\">remove log streams that are not related to http traffic going through the ingress</h4>\n<p>Every request coming in our ingress are normally made to be routed to a specific service.\nNginx could also log k8s health, live checks that won't mach any of our back-end rule.\nTherefore, to avoid pushing non-meaningful or non structured data, we should filter http request that won't route ( without ingress name, service, …etc)</p>\n<p>Fluentd has a filter plugin <code>grep</code> that will help us to exclude data.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">&lt;filter nginx&gt;</span>\n    <span class=\"hljs-meta\">@type</span> grep\n    <span class=\"hljs-variable\">&lt;exclude&gt;</span>\n\n    <span class=\"hljs-variable\">&lt;/exclude&gt;</span>\n<span class=\"hljs-variable\">&lt;/filter&gt;</span>\n</code></pre>\n<p>the exclusion rules requires specifying with log stream we want to apply a grep patter :</p>\n<pre><code class=\"hljs\"><span class=\"hljs-params\">&lt;filter nginx&gt;</span>\n    @type grep\n    <span class=\"hljs-params\">&lt;exclude&gt;</span>\n          key log_streamkey\n          pattern <span class=\"hljs-meta-keyword\">/regexp/</span>\n    <span class=\"hljs-params\">&lt;/exclude&gt;</span>\n<span class=\"hljs-params\">&lt;/filter&gt;</span>\n</code></pre>\n<p>in our example we would like to filter the logs stream where the key service is empty</p>\n<p>The regexp excluding empty string is : <code>/^$/</code></p>\n<p>Modify the logstream pipeline by adding the filter that will exclude log stream having an empty service</p>\n<h4 id=\"addtherecordtransformertoyourlogstream\">Add the record transformer to your logstream</h4>\n<p><img src=\"assets/dt_fluentd_record_transformer.png\" alt=\"stdout log stream transformed\" /></p>\n<h3 id=\"addthedynatraceoutputplugin\">Add the dynatrace output plugin</h3>\n<p>the fluentd container deployed in the cluster has already the dynatrace plugin installed.\nThe fluentd plugin is opensource and documented <a href=\"https://github.com/dynatrace-oss/fluent-plugin-dynatrace\">here</a></p>\n<p>The plugin will have specific propeties to define :</p>\n<ul>\n<li>the url of your activegate</li>\n<li>the api_token ( having the log ingest right)</li>\n</ul>\n<pre><code class=\"hljs\">&lt;match nginx&gt;\n    @type              dynatrace\n    active_gate_url <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#{ENV[<span class=\"hljs-string\">&#x27;AG_INGEST_URL&#x27;</span>]}</span>&quot;</span>\n    api_token <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#{ENV[<span class=\"hljs-string\">&#x27;LOG_INGEST_TOKEN&#x27;</span>]}</span>&quot;</span>\n    ssl_verify_none    <span class=\"hljs-literal\">true</span>\n&lt;/match&gt;\n</code></pre>\n<p>Remove the match using the stdout plugin and replace it with dynatrace plugin ( code above)</p>\n<h3 id=\"logviewer\">Log viewer</h3>\n<h4 id=\"filterthelogstoseeourlogs\">Filter the logs to see our logs</h4>\n<h4 id=\"createametricoutofourlogs\">Create a metric out of our logs</h4>","activityList":[]}]}]
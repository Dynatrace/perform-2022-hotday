[{"id":"1","name":"Metrics","content":"<h2 id=\"metrics\">Metrics</h2>\n<p>In this module, we'll:</p>\n<ul>\n<li>Ingest custom metrics via Metric API</li>\n<li>Dashboard custom metrics</li>\n<li>Create a custom metric event</li>\n</ul>\n<h4 id=\"dynatracemetricapi\">Dynatrace Metric API</h4>\n<ol>\n<li>Create API Token</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Access Tokens</code> via Dynatrace Menu : <code>Managed &gt; Access Tokens</code></p></li>\n  <li><p>Click on Create New Token\n  <img src=\"assets/metric_1.png\" alt=\"metric 1\" /></p></li>\n  <li><p>Set token name <code>Perform 2022</code>\n  <img src=\"assets/metric_1_1.png\" alt=\"metric 1_1\" /></p></li>\n  <li><p>Search for <code>metric</code></p></li>\n  <li><p>Select <code>Ingest Metrics</code> &amp; <code>Read Metrics</code> &amp; <code>Write Metrics</code> API v2\n  <img src=\"assets/metric_2.png\" alt=\"metric 2\" /></p></li>\n  <li><p>Search for <code>logs</code></p></li>\n  <li><p>Select <code>Ingest Logs</code> &amp; <code>Read Logs</code> API v2\n  <img src=\"assets/metric_3.png\" alt=\"metric 3\" /></p></li>\n  <li><p>Click on <code>Generate Token</code></p></li>\n  <li><p>Copy and Save Token to Notepad\n  <img src=\"assets/metric_4.png\" alt=\"metric 4\" /></p></li>\n  </ol>\n</blockquote>\n<ol start=\"2\">\n<li>POST Metric via API</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Environment API v2</code> via Account Icon\n  <img src=\"assets/metric_4.4.png\" alt=\"metric 4.4\" /></p></li>\n  <li><p>Search for <code>Metrics</code> then select <code>POST</code> /metrics/ingest\n  <img src=\"assets/metric_4.5.png\" alt=\"metric 4.5\" /></p></li>\n  <li><p>Copy and Paste API-TOKEN via lock icon and authorize token\n  <img src=\"assets/metric_4.6.png\" alt=\"metric 4.6\" /></p></li>\n  <li><p>Click on <code>Try it out</code></p></li>\n  <li><p>Copy and Paste the metrics below :</p></li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">perform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">45</span>\nperform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">55</span>\nperform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">65</span>\nperform2022.mycool.metric,<span class=\"hljs-keyword\">state</span>=Nevada,country=US <span class=\"hljs-number\">73</span>\n</code></pre>\n<blockquote>\n  <ol start=\"6\">\n  <li><p>Click on execute\n  <img src=\"assets/metric_4.7.png\" alt=\"metric 4.7\" /></p></li>\n  <li><p>Validate response</p></li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">&quot;linesOk&quot;</span>: <span class=\"hljs-number\">4</span>,\n  <span class=\"hljs-attr\">&quot;linesInvalid&quot;</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">&quot;error&quot;</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">&quot;warnings&quot;</span>: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<blockquote>\n  <ol start=\"8\">\n  <li>Execute the command several more times over a couple minutes</li>\n  </ol>\n</blockquote>\n<ol start=\"3\">\n<li>Validate Metric in Dynatrace</li>\n</ol>\n<blockquote>\n  <ol>\n  <li>Navigate to <code>Metrics</code> via Dynatrace menu : <code>Observe and explore &gt; Metrics</code></li>\n  <li>Search for <code>perform2022</code>\n  <img src=\"assets/metric_5.png\" alt=\"metric 5\" /></li>\n  </ol>\n  <ul>\n  <li>It may take a minute, refresh screen if metric doesn't appear</li>\n  </ul>\n</blockquote>\n<h3 id=\"dashboard\">Dashboard</h3>\n<ol>\n<li>Create a Dashboard</li>\n</ol>\n<blockquote>\n  <ol>\n  <li>Navigate to <code>Dashboards</code> via Dynatrace menu: <code>Observe and explore &gt; Dashboards</code></li>\n  <li>Click on <code>Create Dashboard</code></li>\n  <li>Set name to <code>Perform 2022 Dashboard</code>\n  <img src=\"assets/metric_6.png\" alt=\"metric 6\" /></li>\n  </ol>\n</blockquote>\n<ol start=\"2\">\n<li>Pin Metric to Dashboard</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Explore Data</code> via Dynatrace menu: <code>Observe and explore &gt; Explore Data</code></p></li>\n  <li><p>Search for <code>Perform2022</code></p></li>\n  <li><p>Split by <code>Country</code> &amp; <code>State</code></p></li>\n  <li><p>Click on <code>Run query</code>\n  <img src=\"assets/metric_7.png\" alt=\"metric 7\" /></p></li>\n  <li><p>Click on <code>Pin to Dashboard</code></p></li>\n  <li><p>Find the <code>Perform 2022 Dashboard</code> Dashboard</p></li>\n  <li><p>Set tile to <code>Perform 2022 Metric</code></p></li>\n  <li><p>Click on <code>Pin</code>\n  <img src=\"assets/metric_8.png\" alt=\"metric 8\" /></p></li>\n  </ol>\n</blockquote>\n<ol start=\"3\">\n<li>Review Dashboard</li>\n</ol>\n<blockquote>\n  <ol>\n  <li>Open <code>Perform 2022 Dashboard</code> and review <code>Perform 2022 Metric</code> tile\n  <img src=\"assets/metric_9.png\" alt=\"metric 9\" /></li>\n  </ol>\n</blockquote>\n<h3 id=\"analyzeandalert\">Analyze and Alert</h3>\n<ol>\n<li>Create Custom Metric Event for Alerting</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Navigate to <code>Custom Events for alerting</code> via Dynatrace menu: <code>Manage &gt; Settings &gt; Anomaly Detection &gt; Custom Events for Alerting</code>\n  <img src=\"assets/metric_10.png\" alt=\"metric 10\" /></p></li>\n  <li><p>Click on <code>Create custom event for alerting</code></p></li>\n  <li><p>Search for <code>Perform2022</code>\n  <img src=\"assets/metric_10.1.png\" alt=\"metric 10.1\" /></p></li>\n  <li><p>Set threshold to <code>30</code></p></li>\n  <li><p>Set threshold time to <code>1</code> one minute in every <code>3</code> minute period\n  <img src=\"assets/metric_11.png\" alt=\"metric 11\" /></p></li>\n  <li><p>Set Event Description Title to <code>Perform2022 Custom Metric Event</code></p></li>\n  <li><p>Set Severity to <code>Error</code></p></li>\n  <li><p>Add the following to message</p></li>\n  </ol>\n</blockquote>\n<pre><code class=\"hljs\">Dynamic Country: {dims:country}\nDynamic State: {dims:<span class=\"hljs-keyword\">state</span>}\n</code></pre>\n<blockquote>\n  <ul>\n  <li>\n  <img src=\"assets/metric_12.png\" alt=\"metric 12\" /></li>\n  </ul>\n</blockquote>\n<ol start=\"2\">\n<li>Generate Problem</li>\n</ol>\n<blockquote>\n  <ol>\n  <li><p>Execute the command we used to ingest the <code>Perform2022.mycool.metric</code> several times over a couple minutes</p></li>\n  <li><p>Navigate to <code>Problems</code> via Dynatrace menu: <code>Observe and explore &gt; Problems</code></p></li>\n  <li><p>A new problem with the title <code>Perform2022 Custom Metric Event</code> will open\n  <img src=\"assets/metric_13.png\" alt=\"metric 13\" /></p></li>\n  <li><p>Click on the problem to open the problem card</p></li>\n  <li><p>Identify the dynamic <code>Country</code> and <code>Sate</code> value\n  <img src=\"assets/metric_14.png\" alt=\"metric 14\" /></p></li>\n  </ol>\n</blockquote>","activityList":[]},{"id":"2","name":"Logs","content":"<h2 id=\"logs\">Logs</h2>\n<p>In this module, we'll:</p>\n<ul>\n<li>Ingest logs using Log Ingestion API </li>\n<li>Pin Log Query to dashboard</li>\n<li>Create Log Metric</li>\n<li>Create Log Event  </li>\n</ul>\n<h4 id=\"logingestapi\">Log Ingest API</h4>\n<p>The Log Ingestion API allows for you to push custom logs into Dynatrace. </p>\n<ol>\n<li>Install/Deploy an ActiveGate</li>\n</ol>\n<blockquote>\n  <p>Navigate to the Dynatrace HUB</p>\n  <ul>\n  <li>Using the Dynatrace Menu -&gt; Manage -&gt; HUB</li>\n  <li>Search for and click on <code>ActiveGate</code>\n  <img src=\"assets/log_ag_install.png\" alt=\"log_ag_install\" /></li>\n  </ul>\n  <p>Click on <code>Install ActiveGate</code>\n  <img src=\"assets/log_ag_install_2.png\" alt=\"log_ag_install_2\" /></p>\n  <p>Install ActiveGate</p>\n  <ul>\n  <li>Select <code>Linux</code></li>\n  <li>Click on <code>Generate Token</code></li>\n  <li>Copy &amp; Execute WGET Command into Linux Server</li>\n  <li>Copy &amp; Execute Install Command into Linux Server\n  <img src=\"assets/log_ag_install3.png\" alt=\"log_ag_install3\" /></li>\n  </ul>\n</blockquote>\n<ol start=\"2\">\n<li>POST Ingest Logs</li>\n</ol>\n<blockquote>\n  <ul>\n  <li>Replace AG_DOMAIN with valid AG domain</li>\n  <li>Replace SaaS Tenant_ID with valid SaaS tenant ID</li>\n  <li>Replace HOST_ID with valid host id</li>\n  <li>Replace PG_ID with valid process group id</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\">curl -X POST &quot;https://&lt;AG_DOMAIN&gt;:9999/e/&lt;SaaS_Tenant_ID&gt;/api/v2/logs/ingest&quot; -H &quot;accept: application/json; charset=utf-8&quot; -H &quot;Authorization: Api-Token dt0c01.UN6EP6OLSUS2BMV4PAKGHROS.WKSO242YLCAN7NXELRVVHFUQJLVSIWOFD2ORBWP2GEWZJ2MR5RH72UVMURSRM43T&quot; -H &quot;Content-Type: application/json; charset=utf-8&quot; -d &quot;[{\\&quot;content\\&quot;:\\&quot;example <span class=\"hljs-keyword\">log</span> content <span class=\"hljs-number\">1</span>\\&quot;,\\&quot;status\\&quot;:\\&quot;error\\&quot;,\\&quot;<span class=\"hljs-keyword\">log</span>.source\\&quot;:\\&quot;/var/<span class=\"hljs-keyword\">log</span>/syslog\\&quot;,\\&quot;dt.entity.host\\&quot;:\\&quot;&lt;HOST ID&gt;\\&quot;,\\&quot;dt.entity.process_group_instance\\&quot;:\\&quot;&lt;PG_ID&gt;\\&quot;},{\\&quot;content\\&quot;:\\&quot;example <span class=\"hljs-keyword\">log</span> content <span class=\"hljs-number\">2</span>\\&quot;,\\&quot;status\\&quot;:\\&quot;<span class=\"hljs-keyword\">info</span>\\&quot;,\\&quot;<span class=\"hljs-keyword\">log</span>.source\\&quot;:\\&quot;/var/<span class=\"hljs-keyword\">log</span>/syslog\\&quot;,\\&quot;dt.entity.host\\&quot;:\\&quot;&lt;HOST ID&gt;\\&quot;,\\&quot;dt.entity.process_group_instance\\&quot;:\\&quot;&lt;PG_ID&gt;\\&quot;}]&quot;\n</code></pre>\n<blockquote>\n  <ul>\n  <li>Example LOG JSON</li>\n  </ul>\n</blockquote>\n<pre><code class=\"hljs\">[\n    {\n    <span class=\"hljs-attr\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;example log content 1&quot;</span>,\n    <span class=\"hljs-attr\">&quot;status&quot;</span> : <span class=\"hljs-string\">&quot;error&quot;</span>,\n    <span class=\"hljs-attr\">&quot;log.source&quot;</span>: <span class=\"hljs-string\">&quot;/var/log/syslog&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.host&quot;</span> : <span class=\"hljs-string\">&quot;&lt;HOST ID&gt;&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.process_group_instance&quot;</span>: <span class=\"hljs-string\">&quot;&lt;PG_ID&gt;&quot;</span>\n  },\n  {\n    <span class=\"hljs-attr\">&quot;content&quot;</span>: <span class=\"hljs-string\">&quot;example log content 2&quot;</span>,\n    <span class=\"hljs-attr\">&quot;status&quot;</span> : <span class=\"hljs-string\">&quot;info&quot;</span>,\n    <span class=\"hljs-attr\">&quot;log.source&quot;</span>: <span class=\"hljs-string\">&quot;/var/log/syslog&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.host&quot;</span> : <span class=\"hljs-string\">&quot;&lt;HOST ID&gt;&quot;</span>,\n    <span class=\"hljs-attr\">&quot;dt.entity.process_group_instance&quot;</span>: <span class=\"hljs-string\">&quot;&lt;PG_ID&gt;&quot;</span>\n  }\n]\n</code></pre>\n<h3 id=\"dashboard\">Dashboard</h3>\n<h3 id=\"analyzeandalert\">Analyze and Alert</h3>","activityList":[]},{"id":"3","name":"Metrics: Integrating Prometheus and Dynatrace","content":"<h2 id=\"metricsintegratingprometheusanddynatrace\">Metrics: Integrating Prometheus and Dynatrace</h2>\n<p>In this module we'll discover how Dynatrace integrates gauge and counter metrics from Prometheus exporters in Kubernetes. As well as, we'll learn how to leverage the power of Dynatrace Davis for Prometheus metrics. And We'll explore charting, alerting and analyzing the Prometheus Metrics.</p>\n<h3 id=\"whatsinitforme\">What's in it for Me?</h3>\n<p>Learning these concepts will build a foundation for your application teams to not only integrate Dynatrace with your Prometheus exporters, but also take one step forward towards having a single source of truth.</p>\n<p><img src=\"assets/metrics_integration.png\" alt=\"seamlessmetricintegration\" /></p>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>Access to the <em>Bastion host</em></li>\n<li>Access to the acl-docs repository</li>\n</ul>","activityList":[{"id":"3.1","name":"Working with Prometheus","content":"<h2 id=\"workingwithprometheus\">Working with Prometheus</h2>\n<p>In this module we'll learn about Prometheus and how to do the following:</p>\n<blockquote>\n  <p>Configure an Exporter\n  Define an Alert\n  Use PromQL </p>\n</blockquote>\n<h3 id=\"whatisprometheus\">What is Prometheus?</h3>\n<p>An open-source monitoring and alerting toolkit, which collects and stores metrics from within your cloud-native stacks via exporters.  </p>\n<p>Key Features:</p>\n<ul>\n<li>a multi-dimensional data model</li>\n<li>PromQL (prometheus query langauge), a flexible query language to select and aggregate time series in real time</li>\n<li>Supports both pull,push method of ingesting time series data</li>\n<li>Identifies targets via Service discovery or static config </li>\n</ul>\n<p>Components:</p>\n<ol>\n<li>Prometheus Server</li>\n</ol>\n<ul>\n<li>Retrieval</li>\n</ul>\n<blockquote>\n  <p>Collects metrics from pre-defined exporters</p>\n</blockquote>\n<ul>\n<li>TSDB</li>\n</ul>\n<blockquote>\n  <p>Storage for collected time series metircs</p>\n</blockquote>\n<ul>\n<li>HTTP Server</li>\n</ul>\n<blockquote>\n  <p>Provides a UI to visualize and query metircs in dashboards using Grafana</p>\n</blockquote>\n<ol start=\"2\">\n<li>Alertmanager</li>\n</ol>\n<blockquote>\n  <p>Manages and raises alerts based on rules defined in Prometheus</p>\n</blockquote>\n<p><img src=\"assets/prometheus.png\" alt=\"Prometheus Components\" /></p>\n<h3 id=\"configureanexporter\">Configure an Exporter</h3>\n<h3 id=\"defineanalert\">Define an Alert</h3>\n<h3 id=\"usepromql\">Use PromQL</h3>","activityList":[]},{"id":"3.2","name":"Integrating Dynatrace With Prometheus","content":"<h2 id=\"integratingdynatracewithprometheus\">Integrating Dynatrace With Prometheus</h2>\n<p>In this module we'll learn how to integrate Dynatrace with Prometheus in Kubernetes.</p>\n<h3 id=\"step1createthedockerfileandscript\">Step 1: Create the Dockerfile and script</h3>\n<ol>\n<li>Create a directory for the docker artifacts</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   (bastion)$ <span class=\"hljs-built_in\">cd</span> ~\n   (bastion)$ mkdir -p docker/\n   (bastion)$ <span class=\"hljs-built_in\">cd</span> docker/\n</code></pre>\n<ol start=\"2\">\n<li>Create a new file named <code>Dockerfile</code> and add the following content:</li>\n</ol>\n<pre><code class=\"hljs docker language-docker\">   <span class=\"hljs-keyword\">FROM</span> alpine:latest\n   <span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> . /app</span>\n   <span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /app</span>\n   <span class=\"hljs-keyword\">RUN</span><span class=\"bash\"> apk add --no-cache wget</span>\n   <span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"bash\"> [ <span class=\"hljs-string\">&quot;sh&quot;</span> ]</span>\n   <span class=\"hljs-keyword\">CMD</span><span class=\"bash\"> [<span class=\"hljs-string\">&quot;hello_world.sh&quot;</span>]</span>\n</code></pre>\n<ol>\n<li>Create a new file named <code>hello_world.sh</code> and add the following content:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Hello World from a Docker Container.&quot;</span>\n</code></pre>\n<ol>\n<li>Ensure that the script is an executable:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   (bastion)$ chmod +x hello_world.sh\n</code></pre>\n<h3 id=\"step2buildandtagacontainerimage\">Step 2. Build and Tag a Container Image</h3>\n<ol>\n<li>Build the container image (<code>-t</code> specifies the repository and a tag). The <code>$USER</code> variable will tag the image with your username.</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   (bastion)$ docker build -t acl/hello-world:<span class=\"hljs-variable\">$USER</span> .\n</code></pre>\n<ol>\n<li>List all container images on your local machine.</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   (bastion)$ docker images\n</code></pre>\n<ol>\n<li>Set another tag.</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   (bastion)$ docker tag acl/hello-world:<span class=\"hljs-variable\">$USER</span> acl/hello-world:<span class=\"hljs-variable\">$USER</span>-stable\n</code></pre>\n<ol>\n<li>List all container images on your local machine.</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   (bastion)$ docker images\n</code></pre>\n<h3 id=\"step3runacontainer\">Step 3. Run a Container</h3>\n<ol>\n<li>Run the container based on a container image.</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">   (bastion)$ docker run acl/hello-world:<span class=\"hljs-variable\">$USER</span>-stable\n</code></pre>","activityList":[]}]},{"id":"4","name":"Logs: Integrating Fluentd and Dynatrace","content":"<h2 id=\"logsintegratingfluentdanddynatrace\">Logs: Integrating Fluentd and Dynatrace</h2>\n<p>In this module, we'll discover how Dynatrace integrates logs events fluentd in Kubernetes. As well as, we'll learn how to leverage these log events in Dynatrace by creating log metrics, log alerts and charting.</p>\n<h3 id=\"whatsinitforme\">What's in it for Me?</h3>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale. </p>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>Access to the <em>Bastion host</em></li>\n<li>Access to the acl-docs repository</li>\n</ul>","activityList":[{"id":"4.1","name":"Working with Fluentd","content":"<h2 id=\"workingwithfluentd\">Working with Fluentd</h2>\n<p>In this module we'll learn about Fluentd and how to do the following:</p>\n<h3 id=\"whatisfluentd\">What is Fluentd?</h3>\n<p>An open-source log collector to unify logging layer.</p>\n<p>Key Features:</p>\n<ul>\n<li>Stores and structures data in JSON</li>\n<li>Pluggable Architecture allows for easily extending functionality</li>\n<li>Built-in Reliability</li>\n</ul>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale. </p>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>Access to the <em>Bastion host</em></li>\n<li>Access to the acl-docs repository</li>\n</ul>","activityList":[]},{"id":"4.2","name":"Logs: Integrating Fluentd and Dynatrace","content":"<h2 id=\"logsintegratingfluentdanddynatrace\">Logs: Integrating Fluentd and Dynatrace</h2>\n<p>In this module we'll learn how to integrate Dynatrace with Fluentd in Kubernetes.</p>\n<h3 id=\"whatsinitforme\">What's in it for Me?</h3>\n<p>Learning these concepts will help your teams transform terabytes of logs into AI-powered answers and additional context for apps and infrastructure, at scale. </p>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>Access to the <em>Bastion host</em></li>\n<li>Access to the acl-docs repository</li>\n</ul>","activityList":[]}]}]